{"mainContent":"<h3>Content :</h3>\n\n1   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\">String Constructor</a> <br>\n2   - <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/String\">String Primitive</a>. <br>\n3   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String Object (String Object Wrapper)</a>. <br>\n4   - Differance between <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_primitives_and_string_objects\">String primitives and String objects</a> <br>\n5   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#comparing_strings\">Compare in string</a> <br>\n6   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion\" =\"\"=\"\">String Coercion (Cưỡng chế chuỗi)</a> <br>\n7   - <a href=\"\">Static Method</a> <br>\n8   - <a href=\"\">Instance Method</a>. <br>\n9   - <a href=\"\">Instance Properties</a>. <br>\n10 - <a href=\"\"></a>. <br>\n\n<!-- ===================================Giới thiệu==================================================================== -->\n\n<section>\n<h3>Giới thiệu về String:⚓⚓⚓</h3>\n- Trong Javascript, String ____ chuỗi ____ các văn bản, string thuộc nhóm kiểu dữ liệu nguyên thủy (primitive). <br>\n- ReadOnly => <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#character_access\" title=\"Permalink to Character access\">Character access</a> through built-in method or using <b>Bracket Notation</b> or <b><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\">charAt()</a></b>\n- String trong <b>Javascript</b> là kiểu dữ liệu <b>Case-sensitive</b> , phân biệt chữ hoa và chữ thường.<br>\n</section>\n\n<!-- ===================================String Constructor==================================================================== -->\n\n<section>\n<h3>String Constructor :⚓⚓⚓</h3>\n- The String constructor is used to create a new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String Object</a> (Which is <b>not primitive</b>). When called instead as a function, it performs type conversion to a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/String\"><b>Primitive String</b></a>, which is usually more useful. <br>\n- String Constructor is only way for create instance of the <b>'class' String (an object wrapper)</b> <br>\n- <b>Note:</b> String() can be called with or without new, but with different effects. See Return value. <br>\n</section>\n\n<!-- ===================================String Primitive==================================================================== -->\n\n<section>\n<h3>String Primitive :⚓⚓⚓</h3>\n- In Javascript String Primitive can be created by <b>String Iteral</b> or <b>Function String</b>. It is readOnly. It doesn't have any properties or methods of its own. <br>\n- When <b>String</b> is called as a function, Javascript implicit to create <b>String Primitive</b>. (It coerces the parameter to a <b>String Primitive</b> - Mozilla) <br>\n- String create from String literals (using double or single quotes) and <b>string</b> returned from <b>Function String</b> calls in a non-constructor context (that is, called without using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"><b>new</b></a> keyword) are <b>Primitive Strings</b>. In contexts where a method is to be invoked on a <b>Primitive String</b> or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup on the wrapper object instead. <br>\n</section>\n\n<!-- ===================================String Object==================================================================== -->\n\n<section>\n<h3>String Object :⚓⚓⚓</h3>\n- A <b>String object</b> can always be converted to its primitive counterpart with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\">valueOf()</a> method. <br>\n- <b>String Primitive</b> can <b>use method and property of Object Wraper</b>. In this case, <b>Object Wraper</b> of string primitive is <b>Object String</b>. When properties are accessed on primitives, JavaScript auto-boxes the value into a <b>String Object</b> and accesses the property on that <b>String Object</b> instead. <br>\n</section>\n\n<!-- ===================================Differance between String primitives and String objects==================================================================== -->\n\n<section>\n<h3>Differance between String primitives and String objects :</h3>\n<pre><code class=\"javascript hljs language-javascript\">\n<span class=\"hljs-title class_\">String</span> <span class=\"hljs-title class_\">Object</span> được tạo ra bởi <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title class_\">Constructor</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"example\"</span>)\n\n<span class=\"hljs-title class_\">String</span> <span class=\"hljs-title class_\">Primitive</span> được tạo ra bởi <span class=\"hljs-title class_\">String</span> iteral và <span class=\"hljs-title class_\">String</span> <span class=\"hljs-keyword\">function</span> \n<span class=\"hljs-keyword\">const</span> example1 = <span class=\"hljs-string\">\"example\"</span>\n<span class=\"hljs-keyword\">const</span> example2 = <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"example\"</span>)\nexample1 === example2 <span class=\"hljs-comment\">//true</span>\n</code></pre>\n</section>\n\n<!-- ===================================Method toString() - Method valueOf()==================================================================== -->\n<section>\n<h3>Method toString() - Method valueOf() :⚓⚓⚓</h3>\n- <b>Method toString() :</b> This method built-in Object Wrapper return <b>String Primitive</b>, just like => String(ObjectWrapper.valueOf()). <br>\n- <b>Method valueOf() :</b> This method built-in Object Wrapper return <b>itself Value</b>. <br>\n\n<pre><code class=\"javascript hljs language-javascript\">\n<span class=\"hljs-keyword\">const</span> example = <span class=\"hljs-string\">\"Example String\"</span>\nexample.<span class=\"hljs-title function_\">toString</span>() === example.<span class=\"hljs-title function_\">valueOf</span>() // it will be <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-title class_\">String</span>(example).<span class=\"hljs-title function_\">toString</span>() === (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(example)).<span class=\"hljs-title function_\">valueOf</span>() // it will be <span class=\"hljs-literal\">true</span>\n</code></pre>\n<pre><code class=\"javascript language-javascript hljs\">\n<span class=\"hljs-keyword\">const</span> exampleNumber = <span class=\"hljs-number\">999</span>;\n<span class=\"hljs-title class_\">Number</span>(exampleNumber).<span class=\"hljs-title function_\">toString</span>() === exampleNumber.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-keyword\">return</span><span class=\"hljs-string\">\"999\"</span>;\n(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Number</span>(exampleNumber)).<span class=\"hljs-title function_\">toString</span>() !== (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Number</span>(exampleNumber)).<span class=\"hljs-title function_\">valueOf</span>(); <span class=\"hljs-string\">\"999\"</span> !== <span class=\"hljs-number\">999</span>;\n</code></pre>\n- toString() là phương thức built-in tồn tại trong tất cả Object Base, và được override lại để phù hợp với từng kiểu dữ liệu <br>\n- Tại sao method toString({}) lại return [object Object] <br>\n- Tại sao method valueOf({a: \"example\", b: 333}) lại return {a: \"example\", b: 333}<br>\n</section>\n\n<!-- ===================================Compare Operators==================================================================== -->\n\n<h3>Compare Operators:⚓⚓⚓</h3>\n- In C, the strcmp() function is used for comparing strings. In JavaScript, you just use the > , < , <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">==</a> , <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">===</a> Operators.<br>\n- Note that all comparison operators, example compare is strings case-sensitively. A common way to compare strings case-insensitively is to convert both to the same case (upper or lower) before comparing them. <br>\n- Method toUpperCase() and Method toLowerCase() will convert all characters in String to latin alphabet if it handles the conversion. <br>\n\n<pre><code class=\"javascript hljs language-javascript\">\n<span class=\"hljs-string\">\"ßßß\"</span>.<span class=\"hljs-title function_\">touppercase</span>() === <span class=\"hljs-string\">\"SSSSSS\"</span>; <span class=\"hljs-comment\">// Handle convert --> Convert Charactor into Latin Alphabet</span>\n<span class=\"hljs-string\">\"ßßß\"</span>.<span class=\"hljs-title function_\">tolowercase</span>() === <span class=\"hljs-string\">\"ßßß\"</span>; <span class=\"hljs-comment\">// Do not handle convert --> No Convert</span>\n</code></pre>\n\n- Khí sử dụng các phép toán so sánh trong Javascript, cần lưu ý 2 điều:\n- Biểu thức so sánh bên trái có cùng kiểu dữ liệu với bên phải: <br>\n- Biểu thức so sánh bên trái không cùng kiểu dữ liệu với bên phải: <br>\n  - Nếu không thì cả biểu thức bên trái và bên phải sẽ cùng được JS ngầm định ép kiểu về ngữ cảnh (non-numeric)<br>\n  - numeric => Number(value) hoặc đơn giản +value<br>\n<pre><code class=\"javsacript hljs> hljs language-scss\" javascipt=\"\" numeric=\"\" example\";=\"\" <span=\"\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">9</span>_999) ; <span class=\"hljs-comment\">// number in mumeric = 999;</span>\n<span class=\"hljs-built_in\">Number</span>(\"<span class=\"hljs-number\">9</span>_999) ; <span class=\"hljs-comment\">// number string in numeric = 999;</span>\n<span class=\"hljs-built_in\">Number</span>(\"example\") ; <span class=\"hljs-comment\">// string in numeric = NaN;</span>\n<span class=\"hljs-built_in\">Number</span>(null) ; <span class=\"hljs-comment\">// null primitive in numeric = 0;</span>\n<span class=\"hljs-built_in\">Number</span>(false) ; <span class=\"hljs-comment\">// false in numeric = 0; </span>\n<span class=\"hljs-built_in\">Number</span>(true) ; <span class=\"hljs-comment\">// true in numeric = 1;</span>\n<span class=\"hljs-built_in\">Number</span>(undefined) ; <span class=\"hljs-comment\">// undefined in numeric = NaN</span>\n<span class=\"hljs-built_in\">Number</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>]) ; <span class=\"hljs-comment\">// Array > 2 element NaN</span>\n<span class=\"hljs-built_in\">Number</span>([\"string\",\"<span class=\"hljs-number\">1</span>\"]) ; <span class=\"hljs-comment\">// Array > 2 element = NaN</span>\n<span class=\"hljs-built_in\">Number</span>([\"string\"]) ; <span class=\"hljs-comment\">// Array string = NaN;</span>\n<span class=\"hljs-built_in\">Number</span>([\"<span class=\"hljs-number\">111</span>\"]) ; <span class=\"hljs-comment\">// Array only 1 element type number string or number inside = 111</span>\n<span class=\"hljs-built_in\">Number</span>({}) ; <span class=\"hljs-comment\">// object in numeric = NaN </span>\n<span class=\"hljs-built_in\">Number</span>({\"<span class=\"hljs-number\">1</span>\":<span class=\"hljs-number\">1</span>}) ; <span class=\"hljs-comment\">// object in numeric = NaN</span>\n<span class=\"hljs-built_in\">Number</span>(Symbol(\"<span class=\"hljs-number\">1</span>\")) ; <span class=\"hljs-comment\">// Uncaught TypeError: Cannot convert a Symbol value to a number</span>\n</code></pre>\n\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\"><h4>String to Another Comparison</h4></a>\n- The operands are compared using the comparison algorithm. <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than#string_to_string_comparison\" title=\"Permalink to String to string comparison\"><h5>- String to string comparison</h5></a>\n- If both values are strings, they are compared as strings, based on the values of the Unicode code points they contain. <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than#string_to_number_comparison\" title=\"Permalink to String to another comparison\"><h5>- String to another comparison</h5></a>\n- Otherwise JavaScript attempts to convert non-numeric types to numeric values. <br>\n- Strings are converted based on the <b>values they contain</b>, and are converted as <b>NaN</b> if they do not contain numeric values. <br>\n\n\n- Read More at: <a href=\"https://javascript.info/comparison\">Javascript.info</a>\n</section>\n\n<!-- ===================================String Coercions ==================================================================== -->\n\n<section>\n<h3>String Coercions:</h3>\n- Explicit : Tường minh <br>\n- Implicit : Ngầm định <br>\n\n<pre><code class=\"javascript hljs language-javascript\">\n<span class=\"hljs-keyword\">const</span> nullVar = <span class=\"hljs-literal\">null</span>  \nnullVar.<span class=\"hljs-title function_\">toString</span>() <span class=\"hljs-comment\">// TypeError: nullVar is null </span>\n<span class=\"hljs-title class_\">String</span>(nullVar) <span class=\"hljs-comment\">// return 'null' </span>\n\n<span class=\"hljs-keyword\">const</span> undefinedVar = <span class=\"hljs-literal\">undefined</span> \nundefinedVar.<span class=\"hljs-title function_\">toString</span>() <span class=\"hljs-comment\">// TypeError: undefinedVar is  // null </span>\n<span class=\"hljs-title class_\">String</span>(undefinedVar) <span class=\"hljs-comment\">// return 'null' </span>\n</code></pre>\n</section>\n\n<!-- ===================================Static properties ==================================================================== -->\n\n<section>\n<h3>Static properties : </h3>\n- Giải thích statics property là gì ? <br>\n</section>\n\n<!-- ===================================Static method==================================================================== -->\n\n<section>\n<h3>Static Methods : </h3>\n- Giải thích static method là gì ? <br>\n<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\">- String.fromCharCode()</a> <br>\n<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\">- String.fromCodePoint()</a> <br>\n<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\">- String.raw()</a> <br>\n</section>\n\n<!-- ===================================Yeild==================================================================== -->\n\n<h3>Yeild :</h3>\n- Yeild là từ khóa dùng để tạm dừng và cũng để tiếp tục việc thực thi bên trong <b>generator function</b> hay <b>iteration</b>. <br>\n\n<a href=\"https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects\"><h3>ECMAScript Language Specification : </h3>\n<small># sec-string-objects</small></a>\n\n\n<section class=\"other\">\n<h2 style=\"color:red\">Related Sections</h2>\n\n<h3>Involved : </h3>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive</a> <br>\n\n<h3>Constructor : </h3> \n- null <br>\n\n<h3>Static properties: </h3>\n- Phân biệt biến và hàm của class và biến và hàm của đối tượng thuộc class <br>\n<h3><a href=\"https://www.w3schools.com/charsets/ref_utf_misc_symbols.asp\">UTF-8 Miscellaneous Symbols</a></h3>\n- Sử dụng Icon as String <br>\n\n<h4><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive</a>.</h4>\n- In <a href=\"/en-US/docs/Glossary/JavaScript\">JavaScript</a>, a <strong>primitive</strong> (primitive value, primitive data type) is data that is not an <a href=\"/en-US/docs/Glossary/Object\">object</a> and has no <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Method\">methods</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/property/JavaScript\">properties</a>. There are 7 primitive data types: <br>\n   - <a href=\"/en-US/docs/Glossary/String\">string</a> <br>\n   - <a href=\"/en-US/docs/Glossary/Number\">number</a> <br>\n   - <a href=\"/en-US/docs/Glossary/BigInt\">bigint</a> <br>\n   - <a href=\"/en-US/docs/Glossary/Boolean\">boolean</a> <br>\n   - <a href=\"/en-US/docs/Glossary/undefined\">undefined</a> <br>\n   - <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a> <br>\n   - <a href=\"/en-US/docs/Glossary/Null\">null</a> <br>\n\n- All primitives are immutable, cannot be altered. Primitive is readOnly has no method, no property <br>\n- Đừng nhầm lẫn giữa một giá trị nguyên thủy \"primitive\" và một biến được gán giá trị nguyên thủy <br>\n- When properties are accessed on primitives, JavaScript auto-boxes the value into a wrapper object and accesses the property on that object instead. <br>\n- Khi các thuộc tính được tuy cập trên các primitives, Javascript sẽ tự động xem primitive là đối số của Object Wrapper và truy cập các thuộc tính trên object đó. Mỗi primitive sẽ có Object Wrapper khác nhau. Ví dụ : new String(\"abc\") !== new String(\"abc\"), Tuy kết quả ra false nhưng chúng lại có chung một Base đó là Object String. <br>\n\n<section></section></section>","methodHelper":[{"method":"<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\" aria-current=\"page\">Length Property</a>","syntax":"<pre><code class=\"hljs language-cpp\">\n<span class=\"hljs-type\">const</span> example = <span class=\"hljs-string\">\"Example String\"</span>\nexample.length === <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// return number 14</span>\n\n<span class=\"hljs-type\">const</span> emoji = <span class=\"hljs-string\">\"😄\"</span>;\nemoji.length === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// return number 2 cause 😄 is not UTF-16</span>\nemoji.lenght !== [...emoji].length  <span class=\"hljs-comment\">// false -> 2 !== 1</span>\n\n</code></pre>","equal":"<pre><code class=\"hljs language-cpp\">\n<span class=\"hljs-type\">const</span> example = <span class=\"hljs-string\">\"Example String\"</span>\nexample.length === <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// return number 14</span>\n<span class=\"hljs-type\">const</span> newArray = [...example] <span class=\"hljs-comment\">// spread syntax </span>\nnewArray.length === <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">// return number 14</span>\n</code></pre>\n\nsee bellow: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax</a>","description":"- The length read-only property of a string contains the length of the string in UTF-16 code units. Length là thuộc tính chỉ đọc thể hiện chuỗi ở đơn vị mã UTF-16. Chỉ đọc tức là chúng ta vẫn có thể truy cập tuy nhiên không sửa xóa được.<br>\n- Writable : no <br>\n- Enumerable : no <br>\n- Configurable : no <br>\n\n- <a href=\"https://tc39.es/ecma262/multipage/text-processing.html#sec-properties-of-string-instances-length\">The number of elements in the String value represented by this String object. Once a String object is initialized, this property is unchanging. It has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.</a> <br>\n. Throw error in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a> if override length.\n\n<pre><code class=\"hljs language-cpp\">\n<span class=\"hljs-type\">const</span> myString = <span class=\"hljs-string\">\"bluebells\"</span>; \nmyString.length === <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">// before try to overide length</span>\nmyString.length = <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// try to overide length => fail </span>\nmyString.length === <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">// still return number 9 \"bluebells\".length</span>\n</code></pre>\n\n\n","index":0},{"method":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\" aria-current=\"page\">String.prototype[@@iterator]()</a>","syntax":"<pre><code class=\"javascript\">\nstring[Symbol.iterator]() // Syntax create iterator object in string\n\nconst example = 'Example String';\nconst iterator = example[Symbol.iterator]();\nlet theChar = iterator.next();\n\nwhile (!theChar.done && theChar.value !== ' ') {\n  console.log(theChar.value);\n  theChar = iterator.next();\n}\n\n</code></pre>\n\n\nLiên quan:  <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable protocol :</a> Giao thức lặp <br>\n- <b>@@iterator</b> method makes strings <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable : Có thể lặp</a><br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration Protocol :</a> There are two protocols: The <a href=\"#the_iterable_protocol\">iterable protocol</a> and the <a href=\"#the_iterator_protocol\">iterator protocol</a>. <br>\n\nLợi ích của: <br>\n- @@iterator là method thực thi iterable protocol (giao thức lặp) giúp cho các đối tượng có method @@iterator đều có thể lặp\n- iterable => có thể lặp bằng for...of  ... còn for...in, fori và method forEach thì sao ????","equal":"1. Iterator Object là object Built-in <b>iterator protocol</b>","description":"<a href=\"https://developer.mozilla.org//en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">- 1. iterable protocol</a>. <br>\n<a href=\"https://developer.mozilla.org//en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">- 2. iterable</a>. <br>\n\n\n<a href=\"https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype-@@iterator\">- String.prototype[@@iterator]() </a>: <br>\nThere are two protocols: The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable protocol</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\">iterator protocol</a>.","index":1},{"method":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\">String.valueOf()</a>","syntax":"<pre><code class=\"hljs language-javascript\">\n<span class=\"hljs-comment\">// Overriding valueOf for custom objects by function and prototype</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myDataType</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-variable language_\">this</span>[ <span class=\"hljs-string\">\"[[primitive]]\"</span> ]= n;\n}\nmyDataType.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">valueOf</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>[ <span class=\"hljs-string\">\"[[primitive]]\"</span> ];\n};\n\n<span class=\"hljs-keyword\">const</span> myObject1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">myDataType</span>(<span class=\"hljs-number\">4</span>);\nmyObject1.<span class=\"hljs-title function_\">valueOf</span>(); <span class=\"hljs-comment\">// number 4</span>\n<span class=\"hljs-keyword\">const</span> myObject2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">myDataType</span>( {a :<span class=\"hljs-number\">1</span> ,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span> ,<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">e</span>:<span class=\"hljs-number\">2</span>} } );\nmyObject2.<span class=\"hljs-title function_\">valueOf</span>() ; <span class=\"hljs-comment\">// {a :1 ,b:2 ,c: {d:1,e:2} } </span>\n<span class=\"hljs-keyword\">const</span> myObject3 = {a :<span class=\"hljs-number\">1</span> ,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span> ,<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">e</span>:<span class=\"hljs-number\">2</span>} } ;\nmyObject3.<span class=\"hljs-title function_\">valueOf</span>() ; <span class=\"hljs-comment\">// {a :1 ,b:2 ,c: {d:1,e:2} } </span>\nmyObject2.<span class=\"hljs-title function_\">valueOf</span>() === myObject3.<span class=\"hljs-title function_\">valueOf</span>() <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// Overriding valueOf for custom objects </span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Box</span> {\n  #value;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">value</span>) {<span class=\"hljs-variable language_\">this</span>.#value = value; }\n  <span class=\"hljs-title function_\">valueOf</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.#value;}\n}\n\n<span class=\"hljs-keyword\">const</span> box = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Box</span>(<span class=\"hljs-number\">123</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(box + <span class=\"hljs-number\">456</span>); <span class=\"hljs-comment\">// 579</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(box == <span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// true</span>\nbox.<span class=\"hljs-title function_\">valueOf</span>();\n\n</code></pre>","equal":"- Method ValueOf() return itself differance with method toString()\n<pre><code class=\"hljs language-typescript\">\n<span class=\"hljs-keyword\">const</span>  <span class=\"hljs-title class_\">Arr</span> = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">object</span> = {a :<span class=\"hljs-number\">1</span> ,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span> ,<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">e</span>:<span class=\"hljs-number\">2</span>} }\n\n<span class=\"hljs-comment\">// example with method valueOf</span>\n<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">valueOf</span>() === <span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">//  === 3</span>\n<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"example\"</span>).<span class=\"hljs-title function_\">valueOf</span>() === <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"example\"</span>); <span class=\"hljs-comment\">// === \"example\"</span>\n<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"3\"</span>).<span class=\"hljs-title function_\">valueOf</span>() !== <span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// \"3\" !== 3 </span>\n<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">valueOf</span>() !== <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 3 !== \"3\"</span>\n<span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>).<span class=\"hljs-title function_\">valueOf</span>() === <span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>); <span class=\"hljs-comment\">// true === true</span>\n<span class=\"hljs-title class_\">Arr</span>.<span class=\"hljs-title function_\">valueOf</span>() === <span class=\"hljs-title class_\">Arr</span>; <span class=\"hljs-comment\">// ArrId = ArrId</span>\n<span class=\"hljs-built_in\">object</span>.<span class=\"hljs-title function_\">valueOf</span>() === <span class=\"hljs-built_in\">object</span>; <span class=\"hljs-comment\">//objId === objId</span>\n\n<span class=\"hljs-comment\">// example with method toString</span>\n<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-comment\">// String(3)</span>\n<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-string\">\"3\"</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-comment\">// String(3)</span>\n<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"example\"</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"example\"</span> <span class=\"hljs-comment\">// String(\"example\")</span>\n<span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-literal\">true</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-comment\">// String(true)</span>\n<span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-literal\">false</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-comment\">// String(false)</span>\n<span class=\"hljs-title class_\">Arr</span>.<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">'1,2,3'</span>\n<span class=\"hljs-built_in\">object</span>.<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">'[object Object]'</span>\n</code></pre>\n","description":"- Method valueOf() same with method toString() in String Object, Both return <b>String Primitive</b>. <br>\n- The method valueOf() method returns the [[primitive]] properties of Object Wrapper. <br>\n\n- 1. BigInt.valueOf() <br>\n- 2. Boolean.valueOf() <br>\n- 3. Number.valueOf() <br>\n- 4. String.valueOf() <br>\n- 5. Object.valueOf() <br>\n- 6. Symbol.valueOf() <br>\n- 7. Date.valueOf() <br>\n","index":2},{"method":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">String.prototype.toString()</a>","syntax":"<pre><code class=\"javascript hljs language-javascript\">\n<span class=\"hljs-keyword\">const</span> example = <span class=\"hljs-string\">\"Example String\"</span> \n<span class=\"hljs-keyword\">const</span> emoji = <span class=\"hljs-string\">\"😄\"</span>;\n\nexample.<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"Example String\"</span> <span class=\"hljs-comment\">// equal with example.valueOf() === example.toString()</span>\nemoji.<span class=\"hljs-title function_\">toString</span>() === emoji <span class=\"hljs-comment\">// true \"😄\" === \"😄\"</span>\n\n</code></pre>","equal":"<pre><code class=\"hljs language-typescript\">\n<span class=\"hljs-comment\">// example with method toString</span>\n<span class=\"hljs-keyword\">const</span>  <span class=\"hljs-title class_\">Arr</span> = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">object</span> = {a :<span class=\"hljs-number\">1</span> ,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span> ,<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">e</span>:<span class=\"hljs-number\">2</span>} }\n\n<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-comment\">// String(3)</span>\n<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-string\">\"3\"</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-comment\">// String(3)</span>\n<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">\"example\"</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"example\"</span> <span class=\"hljs-comment\">// String(\"example\")</span>\n<span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-literal\">true</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-comment\">// String(true)</span>\n<span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-literal\">false</span>).<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-comment\">// String(false)</span>\n<span class=\"hljs-title class_\">Arr</span>.<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">'1,2,3'</span>\n<span class=\"hljs-built_in\">object</span>.<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">'[object Object]'</span>\n</code></pre>","description":"- 1. Array.toString <br>\n- 2. BigInt.toString <br>\n- 3. Boolean.toString <br>\n- 4. Date.toString <br>\n- 5. Error.toString <br>\n- 6. Function.toString <br>\n- 7. Number.toString <br>\n- 8. Object.toString <br>\n- 9. RegExp.toString <br>\n- 10. String.toString <br>\n- 11. Symbol.toString <br>\n- 12. TypedArray.toString <br>\n\n<b>Lưu ý:</b> <br>\n- ({a: \"example\", b:1 }).toString() === '[object Object]'  <br>\n- [1,2,3].toString() === '1,2,3' <br>","index":3}]}