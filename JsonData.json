{"documentTitle":"Boolean - JavaScript | Note","headingMethodHelper":"      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean Helper</a>\n    ","mainContent":"<!-- ================================ 0 . Content ================================ -->\n<h3>Content</h3>\n- <a href=\"\">1. Boolean Primitive</a> <br>\n- <a href=\"\">2. Boolean Object | Boolean Instance</a> <br>\n- <a href=\"\">3. Boolean Conversion | Boolean Coercion</a> <br>\n- <a href=\"\">4. Boolean Creator - Boolean Literal | Function Boolean | Function Constructor</a> <br>\n\n\n\n<!-- ================================ 1 . Boolean primitives ================================ -->\n\n<h3><a href=\"\">1. Primitives Boolean</a></h3>\n- Primitives Boolean is a value of Boolean Object <br>\n- Primitives Boolean values are true and false <br>\n- Do not confuse the <span style=\"color:red\">Primitive Boolean</span> with <span style=\"color:blue\">Boolean Object</span> <br> \n- See also: <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive</a> <br>\n\n\n\n<!-- ================================ 2 . Boolean Objects | Boolean Instance ================================ -->\n\n<h3><a href=\"\">2. Boolean Object | Boolean Instance </a></h3>\n- Boolean Object is an Object has property <span style=\"color:red; font-weight:bold\">[[PrimitiveValue]] : false </span> <br>\n- Boolean Object | Boolean Instance was created by <span style=\"color: blue; font-weight: bold\">new</span> keyword <br>\n- All Object is Truthy and It will be evaluated as true, Dont confuse <span style=\"color:blue; font-weight:bold\">Boolean(new Boolean(false))</span> --> This will be <span style=\"color:red\">return true </span> <br>\n\n<pre><code class=\"hljs\">\n// Creating Boolean Object | Boolean Instance with Falsy Arguments \n\nnew Boolean(false) // output : Boolean{false} <--- This is object \nnew Boolean(\"\", '', ``) // output : Boolean{false} <--- This is object \nnew Boolean(-0, 0, 0n) // output : Boolean{false} <--- This is object \nnew Boolean(null) // output : Boolean{false} <--- This is object \nnew Boolean(NaN) // output : Boolean{false} <--- This is object \nnew Boolean(undefined) // output : Boolean{false} <--- This is object  \n\n// Creating Boolean Object | Boolean Instance with Truthy Arguments\n\nnew Boolean(true) // output : Boolean{true} <--- This is object  \nnew Boolean('true') // output : Boolean{true} <--- This is object  \nnew Boolean('false') // output : Boolean{true} <--- This is object  \nnew Boolean('Example') // output : Boolean{true} <--- This is object  \nnew Boolean([]) // output : Boolean{true} <--- This is object  \nnew Boolean({}) // output : Boolean{true} <--- This is object  \n</code></pre>\n<br>\n\n<!-- ================================ 3 . Boolean Conversion ================================ -->\n\n<h3><a href=\"\">3. Boolean Conversion</a></h3>\n- <span style=\"color:blue\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion\">Type Conversion</a></span> is similar to <span style=\"color:red\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\">Type Coercion.</a></span> Type Conversion can be either implicit or explicit while Type Coercion is implicit. <br>\n<span style=\"font-weight:bold; color: red\">- Boolean Conversion | Explicit | Casting Datatype usually implement by Developer </span> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!\">Double NOT</a> which converts to a boolean using the same algorithm as above. <br>\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\">Boolean()</a> function: Boolean(x) uses the same algorithm as above. <br>\n\n\n<pre><code class=\"hljs\">\n// Casting with Falsy values\n\n!!false === false // because false is falsy\n!!0 === false // because 0 is falsy same with -0, 0n\n!!\"\" === false // because \"\" is falsy same with another empty-string `` and ''\n!!null === false // because null is falsy\n!!undefined === false // because undefined is falsy\n!!NaN === false // because NaN is falsy\n\n// Casting with truthy values\n\n!![] === true // because [] is truthy <---- [] is object => ( ([]).valueOf() ).toString() === \"[object Object]\" <---- \"[object Object]\" is truthy\n!!{} === true // because {} is truthy <---- {} is object => ( ([]).valueOf() ).toString() === \"[object Object]\" <---- \"[object Object]\" is truthy\n!!99 === true // because 99 is truthy \n!!\"Example\" === true // because \"Example\" is truthy \n!!true === true // because true is truthy \n!!\"true\" === true // because \"true\" is truthy \n</code></pre>\n\n<span style=\"font-weight:bold; color: red\">- Boolean Conversion | Implicit </span> <br>\n\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">+ operator</a> — if <span style=\"color:blue; font-weight: bold\">one operand is a string</span>, string concatenation is performed. Otherwise, numeric addition is performed. <br>\n\n<pre><code class=\"hljs\">// 1. Javascript Implicit when using + operator\n3 + \"Example\" === \"3Example\" // string concat performed\n3 + \"\" === \"3\" // string concat performed\n3 + false === 3 // 3 + Number(false) === 3 because numeric addition performed\n3 + true === 4 // 3 + Number(true) === 4 because numeric addition performed\n3 + true === [] // 3 + Number([]) === 3 because numeric addition performed\n3 + true === [3] // 6 + Number([3]) === 6 because numeric addition performed\n3 + true === Object // 3 + Number({}) === NaN because numeric addition performed\n3 + undefined // output : 3 + Number(undefined) will be NaN\n3 + null // output : 3 + Number(null) will be NaN\n3 + NaN // output : 3 + Number(NaN) will be NaN\n</code></pre>\n\n<pre><code class=\"hljs\">\n// 2. Javascript Implicit when using logical operators, conditional statements, or any boolean context\n  const stringConversion = new String([]) // output : String{\"\"}\n  const numberConversion = new Number([]) // output : Number{0}\n  \"Khi tạo ra Instance mỗi đối tượng sẽ có cách ép kiểu riêng của nó. Ứng với từng ngữ cảnh mà Javascript thực hiện việc ép kiểu\";\n  \"Đối với Boolean Context thì JavaScript sẽ đánh giá theo Truethy/ Falsy\";\n  \"Đối với Number Context thì JavaScript sẽ đánh giá theo Numeric/ Non-Numeric Tuy nhiên vẫn chưa hiểu được Number([2]) tại sao lại ra 2 => Trong khi [2] là Object không được xem là numeric\n  \"Đối với String Context thì JavaScript sẽ đánh giá dựa trên property [[Primitive]] ở Object Wrapper của từng đối số.\n\n</code></pre>\n\n<pre><code class=\"hljs\">\n// 3. Javascript Implicit when compare with == operator\n\n</code></pre>\n\n\n<!-- ================================ 4 . Boolean Creator ================================ -->\n\n<h3><a href=\"\">4. Boolean Creator - Boolean Literal | Function Boolean | Function Constructor</a> </h3>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#boolean_literals\">The Boolean literal</a> has two literal values: true and false. <br>\n- Function Boolean : When Boolean() is called as a function (without new), it coerces the parameter to a boolean primitive. <br>\n- Function Constructor : When <span style=\"color:red; font-weight:bold\">Boolean()</span > is called as a constructor (with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new keyword</a>), it creates a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a> object, which is <strong>not</strong> a primitive. <br>\n\n\n<!-- ================================ Boolean Context ================================ -->\n\n\n<h3>Boolean Context</h3>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Loosely equal</a> algorithm <br>\n\n- Note: Unlike other type conversions like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">string coercion</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number coercion</a>, boolean coercion using Truthy/ Falsy algorithm\n\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Boolean\">Boolean defined </a> <br>\n- For example, in JavaScript, Boolean conditionals are often used to decide which sections of code to execute (such as in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if statements</a>) or repeat (such as in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">for loops</a>). <br>\n\n- Boolean thường được dùng trong logical operators, conditional statements, or any boolean context.<br>\n\n\n\n<!-- ================================ Compare ================================ -->\n\n<h3>Compare</h3>\n<iframe src=\"https://dorey.github.io/JavaScript-Equality-Table/\" height=\"1200px\" width=\"100%\" frameborder=\"0\"></iframe>\n\n<!-- ================================ Topic Ref ================================ -->\n\n<h3>Topic Ref</h3>\n<a href=\"https://tc39.es/ecma262/#sec-toprimitive\">Đặc tả kỹ thuật: toPrimitive()</a> <br>\n<a href=\"https://javascript.info/object-toprimitive\">JS Info</a> <br>\n<a href=\"https://viblo.asia/p/chuyen-doi-nguyen-thuy-voi-kieu-doi-tuong-4P856A0BlY3\">Bài viết Tiếng Việt</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">Primitive 1</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive 2</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#literals\">Literals Detail</a>\n\n","headingMainContent":"      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean Summary</a>\n    ","methodHelper":[{"method":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>","syntax":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>","involved":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>","description":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>\n\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a> object overrides the toString method of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a>; it does not inherit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">Object.prototype.toString()</a>. <br>\n\n\n- For Boolean values, the toString method returns a string representation of the boolean value, which is either \"true\" or \"false\".","index":0}]}