{"mainContent":"<h3>String :</h3>\n- String Object Wrapper \n- String Constructor \n\n<h3>Yeild :</h3>\n- Yeild là từ khóa dùng để tạm dừng và cũng để tiếp tục việc thực thi bên trong <b>generator function</b> hay <b>iteration</b>.\n\n\n\n<hr>\n<h3><a href=\"https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects\">ECMAScript Language Specification :\n<br><small># sec-string-objects</small></a>\n</h3>\n","methodHelper":[{"method":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\">at()</a>","syntax":"[😄,😠,🔴,⏺].at(1) => return 😠 ","equal":"[ 😄, 😠 , 🔴 , ⏺ ][1]","description":"- At aceept both positive and number \n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#bracket_notation\" title=\"Permalink to Bracket notation\">Bracket notation</a>   \n- Property accessors","index":0},{"method":"<a href=\"https://developer.mozilla.org//en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\" aria-current=\"page\">String.prototype[@@iterator]()</a>","syntax":"string[Symbol.iterator]() return <b>iterator</b>\n<hr>\nconst str = 'Example String';\n\nconst iterator = str[Symbol.iterator]();\nlet theChar = iterator.next();\n\nwhile (!theChar.done && theChar.value !== ' ') {\n  console.log(theChar.value);\n  theChar = iterator.next();\n}\n\n***\n\n\n","equal":"1. Iterator Object là object Built-in <b>iterator protocol</b>","description":"<a href=\"https://developer.mozilla.org//en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">- 1. iterable protocol</a>\n<a href=\"https://developer.mozilla.org//en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">- 2. iterable</a>","index":1}]}