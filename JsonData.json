{"documentTitle":"Boolean - JavaScript | Note","headingMethodHelper":"      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean Helper</a>\n    ","mainContent":"<h3>Content</h3>\n- <a href=\"\">1. Boolean primitives</a> <br>\n- <a href=\"\">1. Boolean objects</a> <br>\n\nTất cả Object, bao gồm Object Boolean{false} đề được đánh giá \"evaluates\" là true bên trong Boolean Conversion \"because all objects are truthy\" <br>\n---\n- <a href=\"\">1. Boolean Conversion</a> <br>\n- <a href=\"\">2. Boolean Creator - Boolean Iteral</a> <br>\n- <a href=\"\">3. Boolean Creator - Function Boolean</a> <br>\n- <a href=\"\">4. Boolean Creator - Function Constructor</a> <br>\n- <a href=\"\">5. Boolean Instance</a> <br>\n---\n\n- <a href=\"\">5. Boolean conversion === Boolean convert === Boolean Casting <br>\n- </a><a href=\"\">5. Boolean conversion === Boolean Convert - Implicit - Boolean coercion</a> : Chuyển đổi Boolean cưỡng chế - Ép kiểu ngầm định <br>\n\n\n- <a href=\"\">5. Boolean conversion === Boolean Convert - Explicit</a> : Chuyển đổi Boolean - Ép kiểu tường minh <br>\n=> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!\">Double NOT</a> <br>\n=> The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\">Boolean()</a> function: Boolean(x) uses the same algorithm as above <br>\n\n<hr>\n\n<pre><code class=\"hljs\">\nconst myFalse = new Boolean(false);   // initial Boolean Instance \"Object\" by Constructor\nBoolean(myFalse) === true;           // because all objects are truthy\nconst myString = new String('Hello'); // initial Boolean Instance \"Object\" by Constructor\nBoolean(myString) === true;          // because all objects are truthy\nconst myTrue = false; // initial Boolean Primitive by Boolean iteral\nBoolean(false) === false // Ép kiểu false === false\n</code></pre>\n\n\nBoolean thường được dùng trong logical operators, conditional statements, or any boolean context.<br>\n\n<h3>Boolean Creator - Function Constructor</h3>\n- Create Boolean Object / Boolean Instance with initial value is <b>true</b>\n\n<pre><code class=\"hljs\">\n  const bNoParam = new Boolean();\n  const bZero = new Boolean(0);\n  const bNull = new Boolean(null);\n  const bEmptyString = new Boolean('');\n  const bfalse = new Boolean(false);\n</code></pre>\n\n\n- Create Boolean Object / Boolean Instance with initial value is <b>false</b>\n\n<pre><code class=\"hljs\">\n  const btrue = new Boolean(true);\n  const btrueString = new Boolean('true');\n  const bfalseString = new Boolean('false');\n  const bSuLin = new Boolean('Su Lin');\n  const bArrayProto = new Boolean([]); // dễ nhầm lẫn đối với Number Conversion và String Conversion\n  const bObjProto = new Boolean({});\n\n// ===========================================================================\n\n  const stringConversion = new String([]) // output : String{\"\"}\n  const numberConversion = new Number([]) // output : Number{0}\n  \"Khi tạo ra Instance mỗi đối tượng sẽ có cách ép kiểu riêng của nó. Ứng với từng ngữ cảnh mà Javascript thực hiện việc ép kiểu\";\n  \"Đối với Boolean Context thì JavaScript sẽ đánh giá theo Truethy/ Falsy\";\n  \"Đối với Number Context thì JavaScript sẽ đánh giá theo Numeric/ Non-Numeric Tuy nhiên vẫn chưa hiểu được Number([2]) tại sao lại ra 2 => Trong khi [2] là Object không được xem là numeric\n  \"Đối với String Context thì JavaScript sẽ đánh giá dựa trên property [[Primitive]] ở Object Wrapper của từng đối số.\n\n\n</code></pre>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Loosely equal</a> algorithm <br>\n\n- Note: Unlike other type conversions like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">string coercion</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number coercion</a>, boolean coercion using Truthy/ Falsy algorithm\n\n<hr>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Boolean\">Boolean defined </a> <br>\n- For example, in JavaScript, Boolean conditionals are often used to decide which sections of code to execute (such as in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if statements</a>) or repeat (such as in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">for loops</a>). <br>\n\n<hr>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">Primitive 1</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive 2</a> <br>\n\n","headingMainContent":"      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean Summary</a>\n    ","methodHelper":[{"method":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>","syntax":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>","involved":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>","description":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>\n\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a> object overrides the toString method of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a>; it does not inherit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">Object.prototype.toString()</a>. <br>\n\n\n- For Boolean values, the toString method returns a string representation of the boolean value, which is either \"true\" or \"false\".","index":0}]}