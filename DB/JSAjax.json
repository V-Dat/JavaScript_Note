{
    "documentTitle": "AJAX - JavaScript | Note",
    "headingMethodHelper": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX - Asynchronous Javascript And XML</a>",
    "mainContent": "<!-- ================================ 0 . Content ================================ -->\n<h3>Content</h3>\n- <a href=\"#1\">1. AJAX Article</a> <br>\n- <a href=\"#2\">2. AJAX</a> <br>\n- <a href=\"#3\">3. Object XMLHttpRequest</a> <br>\n- <a href=\"#4\">4. XMLHttpRequest State</a> <br>\n- <a href=\"#5\">5. HTTP Open</a> <br>\n- <a href=\"#4\">4. Using XMLHttpRequest</a> <br>\n- <a href=\"#4\">4. Using XMLHttpRequest</a> <br>\n- <a href=\"#4\">4. Using XMLHttpRequest</a> <br>\n\n\n\n<!-- ================================ 1. AJAX Article ================================ -->\n\n<h3><a id=\"1\" href=\"https://www.semanticscholar.org/paper/Ajax%3A-A-New-Approach-to-Web-Applications-Garrett/c440ae765ff19ddd3deda24a92ac39cef9570f1e#citing-papers\">1. AJAX Article</a></h3>\n\n<button><a href=\"https://courses.cs.washington.edu/courses/cse490h/07sp/readings/ajax_adaptive_path.pdf\">Download Article</a></button>\n\n<!-- ================================ 2. AJAX ================================ -->\n\n<h3><a id=\"2\" href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">2. AJAX</a></h3>\n\n\n- Asynchronous JavaScript and XML, or <a href=\"https://www.semanticscholar.org/paper/Ajax%3A-A-New-Approach-to-Web-Applications-Garrett/c440ae765ff19ddd3deda24a92ac39cef9570f1e?p2df\" class=\"external\" rel=\" noopener\">Ajax</a>, is not a technology in itself, but rather an approach to using a number of existing technologies together, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\">HTML</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/XHTML\">XHTML</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\">CSS</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">JavaScript</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">DOM</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/XML\">XML</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/XSLT\">XSLT</a>, and most importantly the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> object.\nWhen these technologies are combined in the Ajax model, web applications are able to make quick, incremental updates to the user interface without reloading the entire browser page. This makes the application faster and more responsive to user actions. <br> <br>\n- Although X in Ajax stands for XML, <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/JSON\">JSON</a> is preferred because it is lighter in size and is written in JavaScript  <br> <br>\n\n- AJAX viết tắt là Asynchronous JavaScript and XML, AJAX bản thân không phải là một công nghệ mà nó là cách dùng để kết hợp các công nghệ lại với nhau. Như <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\">HTML</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/XHTML\">XHTML</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\">CSS</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">JavaScript</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">DOM</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/XML\">XML</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/XSLT\">XSLT</a>, và quan trọng là đối tượng <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>. <br> \n\n- Khi mô hình AJAX xuất hiện nó giúp tăng trải nghiệm người dùng, đặc biệt là khi người dùng tương tác với giao diện mà không cần tải lại toàn bộ trang trình duyệt. Điều này giúp ứng dụng nhanh hơn và phản hồi nhanh hơn với các thao tác của người dùng. Lúc trước khi cần xử lý một việc gì đó liên quan đến DB thì Server luôn trả lại một File HTML và Browser cần load lại toàn bộ trang. <br>\n\n- Mặc dù X trong AJAX là XML nhưng JSON được sử dụng nhiều hơn vì nó nhẹ và gần gũi hơn đối với Javascript Developer. <br>\n\n\n<!-- ================================ 3 . Object XMLHttpRequest  ================================ -->\n\n<h3><a id=\"3\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">3. Object XMLHttpRequest</a></h3>\n\n<pre class='js'><code  class=\"javascript\">\nvar url = 'http://ajax-json.cione.vn/api/v1/products';  // Step 1 - Dòng này dùng để khai báo địa chỉ: http://ajax-json.cione.vn/  và nơi lấy dữ liệu: api/v1/products\nvar xhr = new XMLHttpRequest(); // Step 2 - Khai báo đối tượng xhr giúp thực hiện gửi request lên server \nvar output = document.getElementById('output'); // Step 3 - Tìm Element cần update \nxhr.onreadystatechange = handleResult;  // Step 4 - Khi xhr được gửi lên server mà nó có sự thay đổi về trạng thái thì sẽ kích hoạt function handle result\nxhr.open('GET', url); // Step 5 - Mở kết nối đến server \nxhr.send(); // // Step 6 - Sau khi mở cổng kết nối thì chúng ta cần gửi gói tin đi qua cổng đó\nfunction handleResult() { if (xhr.readyState === XMLHttpRequest.DONE){output.innerHTML = xhr.responseText}}\n</code></pre>\n\n<b  class='red'> XHR Request State và onReadyStateChange </b> : Mỗi khi XHR State change thì hàm onReadyStateChange đều được gọi <br>\n- Step 2 : Ngay sau khi tạo đối tượng XHR thì XHR State = \"0\" [UNSENT] <br>\n- Step 5 : Ngay sau khi mở cổng kết nối với Servers thì XHR State = \"1\" [OPENED] <br>\n- Step 6 : Khi XHR nhận được Header từ servers trả về thì XHR State = \"2\" [HEADER_RECERIVED] <br>\n- Step x : Tiếp tục nhận nội dung từ servers trả về thì XHR State = \"3\" [LOADING] <br>\n- Step x : Cuối cùng khi nhận response từ Servers hoặc lỗi thì XHR State = \"4\" [DONE]  <br>\n\n<b  class='red'> xhr.send </b> là gì ? <br>\n- xhr.send(arg) : Send là method của XMLHttpRequest, dùng để truyền dữ liệu lên servers thông qua đối số của method send. <br>\n- xhr.send chỉ thực thi được khi cổng kết nối dã được mở tức là XHR State = 1, Nếu XHR State chưa mở sẽ không send được. <br>\n- xhr.send(\"hello world\") : Sau khi cổng kết nối được mở thì xhr.send sẽ thực thi và gửi string \"hello world\" lên server. <br>\n- xhr.send không chỉ dùng để gửi string lên server, nó còn gửi được nhiều thứ khác nữa. <br>\n\n\n\n\n<!-- ================================ 4 . XMLHttpRequest State ================================ -->\n\n<h3><a id=\"4\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\">4. XMLHttpRequest State</a></h3>\n\n<b  class='red'> XHR Request State và onReadyStateChange </b> : Mỗi khi XHR State change thì hàm onReadyStateChange đều được gọi <br>\n\n<div style=\"display:flex;justify-content: space-between;\">\n<table class=\"rs-css\">\n<thead><tr><th>Value</th><th>State</th><th>Description</th></tr></thead>\n<tbody>\n<tr><td>0</td><td>UNSENT</td><td>Client has been created. open() not called yet.</td>\n</tr><tr><td>1</td><td>OPENED</td><td>open() has been called.</td>\n</tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send() has been called, and headers and status are available.</td>\n</tr><tr><td>3</td><td>LOADING</td><td>Downloading; responseText holds partial data.</td>\n</tr><tr><td>4</td><td>DONE</td><td>The operation is complete.</td>\n</tr>\n</tbody>\n</table>\n<img src=\"./Assets/ImageAjax/challange.png\" alt=\"challange\" width=\"50%\"/>\n</div> <br>\n\n<pre class='js'><code  class=\"javascript\">const url = \"/\"\nconst xhr = new XMLHttpRequest();\nxhr.onreadystatechange = handleStateChange()\nxhr.open(\"GET\",url);\nxhr.send();\nfunction handleStateChange(){\nswitch(xhr.readyState){\n    case XMLHttpRequest.OPENED:  alert(\"Mở kết nối\"); break;\n    case XMLHttpRequest.HEADERS_RECEIVED:  alert(\"Header đã được nhận\"); break;\n    case XMLHttpRequest.LOADING:  alert(\"Loading\"); break;\n    case XMLHttpRequest.DONE:  alert(\"Done\"); break;\n  }\n}\n</code></pre>\n\n<!-- ================================ 5 . Web 1 - Web 2 - Web 3 ================================ -->\n\n<h3><a id=\"5\" href=\">5. Web 1 - Web 2 - Web 3</a></h3>\n\n- Web 1.0 Hầu hết là các website tĩnh, không được cập nhật thường xuyên. Thông thường chỉ chủ Website mới có thể cập nhật Website.\n\n- Web 2.0 Phổ biến bởi Tim O'Reilly và Dale Dougherty tại hội nghị O'Reilly Media. Phân loại nội dung \"Tagging\". Nội dung được tạo bởi người dùng. Giao diện đa dạng và tương tác cao đối với người dùng \n\n- Web 3.0 Hehe\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- ================================ 1 . Keyed Collections  ================================ -->\n\n\n<h3>Topic Ref</h3>\n<a href=\"https://javascript.info/object-toprimitive\">JS Info</a> <br>\n<a href=\"https://tinhte.vn/thread/mot-bai-viet-de-hieu-qua-khu-hien-tai-va-tuong-lai-cua-web-3-0.3454256/\">Web-1-2-3</a> <br>\n",
    "headingMainContent": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX Summary</a>",
    "methodHelper": [
        {
            "method": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open\">XMLHttpRequest.open()</a></h3>\n",
            "syntax": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open\">XMLHttpRequest.open()</a></h3>\n",
            "involved": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open\">XMLHttpRequest.open()</a></h3>\n",
            "description": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></h3>\n\n- Đối số của hàm <b  class='red'>Eval(arguments)</b> có thể là JavaScript expression, statement, or sequence of statements. <br>\n\n- Javascript sẽ handle hàm eval tương tự với <-S-C-R-I-P-T->, Tức là Eval chỉ chấp nhận các đối số liên quan đến CommonJS. So import declarations (which can only exist in modules) are not allowed. <br>\n\n- A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a> declarations (which can only exist in modules) are not allowed. <br>\n\n- The completion value of evaluating the given code. If the completion value is empty,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a> is returned.<br>\n\n<h3  class='red'>Đặc Tả: <a href='https://tc39.es/ecma262/multipage/global-object.html#sec-eval-x'>Eval</a></h3>",
            "index": 0
        }
    ],
    "referanceContent": "      <ol>\n        <li>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX - MDN</a>\n        </li>\n        <li>\n          <a href=\"https://stephengrider.github.io/JSPlaygrounds/\">Playgrounds</a>\n        </li>\n        <li>\n          <a href=\"https://github.com/zloirock/core-js#ecmascript-array\">Core JS</a>\n        </li>\n        <li>\n          <a href=\"https://www.totaltypescript.com/tutorials\">TS totorial</a>\n        </li>\n        <li>\n          <a href=\"https://youtube.com/playlist?list=PL75xdq9Y-GaRr69Y8hs9fk748YXpYjNq2\">CiOne</a>\n        </li>\n\n      </ol>\n    "
}