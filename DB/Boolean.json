{
    "documentTitle": "Boolean - JavaScript | Note",
    "headingMethodHelper": "      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean Helper</a>\n    ",
    "mainContent": "<!-- ================================ 0 . Content ================================ -->\n<h3>Content</h3>\n- <a href=\"#1\">1. Boolean Primitive</a> <br>\n- <a href=\"#2\">2. Boolean Object | Boolean Instance</a> <br>\n- <a href=\"#3\">3. Boolean Conversion | Boolean Coercion</a> <br>\n- <a href=\"#4\">4. Boolean Creator</a> - <a  class='red' href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#boolean_literals\">Boolean Literal</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/boolean\">Function Boolean</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">Function Constructor</a><br>\n- <a href=\"#5\">5. Boolean Context</a> <br>\n- <a href=\"#6\">6. Precedence in Boolean Context</a> <br>\n- <a href=\"#7\">7. Short Circuiting</a> <br>\n- <a href=\"#8\">8. Loosely equal (== Algorithm)</a> <br>\n- <a href=\"#9\">9. Strict equal (=== Algorithm)</a> <br>\n- <a href=\"#10\">10. JavaScript Equality Table</a> <br>\n\n\n<!-- ================================ 1 . Boolean primitives ================================ -->\n\n<h3><a id=\"1\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Boolean\">1. Boolean Primitives</a></h3>\n\n- Primitives Boolean is a value of Boolean Object <br>\n- Primitives Boolean values are true and false <br>\n- Do not confuse the <span  class='red'>Primitive Boolean</span> with <span class='blue'>Boolean Object</span> <br> \n- See also: <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive</a> <br>\n\n\n\n<!-- ================================ 2 . Boolean Objects | Boolean Instance ================================ -->\n\n<h3 id=\"2\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Boolean\">2. Boolean Object | Boolean Instance </a></h3>\n\n- Boolean Object is an Object has property <span style=\"color:red; font-weight:bold\">[[PrimitiveValue]] : false </span> <br>\n- Boolean Object | Boolean Instance was created by <span style=\"color: blue; font-weight: bold\">new</span> keyword <br>\n- All Object is Truthy and It will be evaluated as true, Dont confuse <span style=\"color:blue; font-weight:bold\">Boolean(new Boolean(false))</span> --> This will be <span  class='red'>return true </span> <br>\n\n<pre class='js'><code  class=\"javascript\">// Creating Boolean Object | Boolean Instance with Falsy Arguments \n\nnew Boolean(false) // output : Boolean{false} <--- This is object \nnew Boolean(\"\", '', ``) // output : Boolean{false} <--- This is object \nnew Boolean(-0, 0, 0n) // output : Boolean{false} <--- This is object \nnew Boolean(null) // output : Boolean{false} <--- This is object \nnew Boolean(NaN) // output : Boolean{false} <--- This is object \nnew Boolean(undefined) // output : Boolean{false} <--- This is object  \n\n// Creating Boolean Object | Boolean Instance with Truthy Arguments\n\nnew Boolean(true) // output : Boolean{true} <--- This is object  \nnew Boolean('true') // output : Boolean{true} <--- This is object  \nnew Boolean('false') // output : Boolean{true} <--- This is object  \nnew Boolean('Example') // output : Boolean{true} <--- This is object  \nnew Boolean([]) // output : Boolean{true} <--- This is object  \nnew Boolean({}) // output : Boolean{true} <--- This is object  \n\n</code></pre>\n\n<br>\n\n<!-- ================================ 3 . Boolean Conversion ================================ -->\n\n<h3 id=\"3\"><a href=\"\">3. Boolean Conversion</a></h3>\n- <span class='blue'><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion\">Type Conversion</a></span> is similar to <span  class='red'><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\">Type Coercion.</a></span> Type Conversion can be either implicit or explicit while Type Coercion is implicit. <br>\n<span style=\"font-weight:bold; color: red\">- Boolean Conversion | Explicit | Casting Datatype usually implement by Developer </span> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!\">Double NOT</a> which converts to a boolean using the same algorithm as above. <br>\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\">Boolean()</a> function: Boolean(x) uses the same algorithm as above. <br>\n\n\n<pre class='js'><code  class=\"javascript\">// Casting with Falsy values\n!!false === false // because false is falsy\n!!0 === false // because 0 is falsy same with -0, 0n\n!!\"\" === false // because \"\" is falsy same with another empty-string `` and ''\n!!null === false // because null is falsy\n!!undefined === false // because undefined is falsy\n!!NaN === false // because NaN is falsy\n\n// Casting with truthy values\n!![] === true // because [] is truthy <---- [] is object => ( ([]).valueOf() ).toString() === \"[object Object]\" <---- \"[object Object]\" is truthy\n!!{} === true // because {} is truthy <---- {} is object => ( ([]).valueOf() ).toString() === \"[object Object]\" <---- \"[object Object]\" is truthy\n!!99 === true // because 99 is truthy \n!!\"Example\" === true // because \"Example\" is truthy \n!!true === true // because true is truthy \n!!\"true\" === true // because \"true\" is truthy \n\n</code></pre>\n\n<br>\n\n<span style=\"font-weight:bold; color: red\">- Boolean Conversion | Implicit </span> <br>\n\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">+ operator</a> — if <span style=\"color:blue; font-weight: bold\">one operand is a string</span>, string concatenation is performed. Otherwise, numeric addition is performed. <br>\n\n<pre class='js'><code  class=\"javascript\">// 1. Javascript Implicit when using + operator\n3 + \"Example\" === \"3Example\" // string concat performed\n3 + \"\" === \"3\" // string concat performed\n3 + false === 3 // 3 + Number(false) === 3 because numeric addition performed\n3 + true === 4 // 3 + Number(true) === 4 because numeric addition performed\n3 + true === [] // 3 + Number([]) === 3 because numeric addition performed\n3 + true === [3] // 6 + Number([3]) === 6 because numeric addition performed\n3 + true === Object // 3 + Number({}) === NaN because numeric addition performed\n3 + undefined // output : 3 + Number(undefined) will be NaN\n3 + null // output : 3 + Number(null) will be NaN\n3 + NaN // output : 3 + Number(NaN) will be NaN\n\n</code></pre>\n\n<br>\n\n<!-- Javascript Implicit when using logical operators, conditional statements, or any boolean context --> \n\n<pre class='js'><code  class=\"javascript\">// 2. Javascript Implicit when using logical operators, conditional statements, or any boolean context;\nconst stringConversion = new String([]) // output : String{\"\"}\nconst numberConversion = new Number([]) // output : Number{0}\n\"Khi tạo ra Instance mỗi đối tượng sẽ có cách ép kiểu riêng của nó. Ứng với từng ngữ cảnh mà Javascript thực hiện việc ép kiểu\";\n\"Đối với Boolean Context thì JavaScript sẽ đánh giá theo Truethy/ Falsy\";\n\"Đối với Number Context thì JavaScript sẽ đánh giá theo Numeric/ Non-Numeric Tuy nhiên vẫn chưa hiểu được Number([2]) tại sao lại ra 2 => Trong khi [2] là Object không được xem là numeric\";\n\"Đối với String Context thì JavaScript sẽ đánh giá dựa trên property [[Primitive]] ở Object Wrapper của từng đối số.\";\n\n</code></pre>\n\n<!-- Javascript Implicit when compare with == operator --> \n\n<pre class='js'><code  class=\"javascript\">// 3. Javascript Implicit when compare with == operator</code></pre>\n\n\n\n<!-- ================================ 4 . Boolean Creator ================================ -->\n\n<h3 id=\"4\">4. Boolean Creator - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#boolean_literals\">Boolean Literal</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/boolean\">Function Boolean</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">Function Constructor</a></h3>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#boolean_literals\">The Boolean literal</a> has two literal values: true and false. <br>\n- Function Boolean : When Boolean() is called as a function (without new), it coerces the parameter to a boolean primitive. <br>\n- Function Constructor : When <span style=\"color:red; font-weight:bold\">Boolean()</span> is called as a constructor (with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new keyword</a>), it creates a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a> object, which is <strong>not</strong> a primitive. <br>\n\n\n<!-- ================================ 5. Boolean Context ================================ -->\n\n\n<h3 id=\"5\">5. Boolean Context</h3>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Loosely equal</a> algorithm <br>\n\n- Note: Unlike other type conversions like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">string coercion</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">number coercion</a>, boolean coercion using Truthy/ Falsy algorithm <br>\n\n\n\n- For example, in JavaScript, Boolean conditionals are often used to decide which sections of code to execute (such as in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if statements</a>) or repeat (such as in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">for loops</a>). <br>\n\n- Boolean thường được dùng trong logical operators, conditional statements, or any boolean context.<br>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/JavaScript\">JavaScript</a> uses <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\">Type coercion (Glossary)</a> in Boolean contexts.<br>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">The logical AND operator, &&</a> is Boolean Context. <br>\n\n- If block, logical operators, conditional statements is Boolean Context too. <br>\n\n\n<!-- ================================  6. Precedence in Boolean Context ================================ -->\n\n\n<h3 id=\"6\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#operator_precedence\">6. Precedence in Boolean Context</a></h3>\n- The AND operator has a higher precedence than the OR operator, meaning the && operator is executed before the || operator (see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">operator precedence</a>).\n- The higher-precedence expressions are always evaluated first. <br>\n\n<pre class='js'><code  class=\"javascript\">\nconsole.log(3 + 10 * 2); // 23\nconsole.log(3 + (10 * 2)); // 23, because parentheses here are superfluous\nconsole.log((3 + 10) * 2); // 26, because the parentheses change the order\n\na = b = 5; // same as writing a = (b = 5);\n\nconst a = 4 ** 3 ** 2; // Same as 4 ** (3 ** 2); evaluates to 262144\nconst b = 4 / 3 / 2; // Same as (4 / 3) / 2; evaluates to 0.6666...\n\ntypeof a + b; // Equivalent to (typeof a) + b; result is \"number2\"\n\n</code></pre>\n\n<br>\n\n<!-- ================================ 7. Short Circuiting ================================ -->\n\n<h3 id=\"7\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#short-circuiting\">7. Short Circuiting</a></h3>\n- For example, in the expression a && (b + c), if a is falsy, then the sub-expression (b + c) will not even get evaluated. When evaluating a short-circuited operator, the left operand is always evaluated. The right operand will only be evaluated if the left operand cannot determine the result of the operation. <br>\n\n<pre class='js'><code  class=\"javascript\">// case 1\na || (b * c); // evaluate `a` first, then produce `a` if `a` is \"truthy\"\na && (b < c); // evaluate `a` first, then produce `a` if `a` is \"falsy\"\na ?? (b || c); // evaluate `a` first, then produce `a` if `a` is not `null` and not `undefined`\na?.b.c; // evaluate `a` first, then produce `undefined` if `a` is `null` or `undefined`\n\n// case 2\nfunction A() { console.log('called A'); return false; }\nfunction B() { console.log('called B'); return false; }\nfunction C() { console.log('called C'); return true; }\nconsole.log(C() || B() && A()); // called C => true\n\n// case 3\nconsole.log(A() && C() || B()); // called A => called B => false\n\n</code></pre>\n\n<br>\n\n<!-- ================================ 8. Loosely equal (== Algorithm) ================================ -->\n\n<h3 id=\"8\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">8. Loosely equal (== Algorithm)</a></h3>\n<span style=\"color:red; font-weight:bold\">Case 1. If operands has same type </span><br>\n- String: return true only if both operands have the same characters in the same order. <br>\n- Number: return true only if both operands have the same value. +0 and -0 are treated as the same value. If either operand is NaN, return false; so, NaN is never equal to NaN. <br>\n- Boolean: return true only if operands are both true or both false. <br>\n- BigInt: return true only if both operands have the same value. <br>\n- Array and Object and Symbol and Function: return true only if both operands reference the same object. <br> <br>\n\n<span style=\"color:red; font-weight:bold\">Case 2. If both operands differance type</span> <br>\n- If one is null and another is undefined return true. <br>\n- If one is Symbol => return false. <br>\n- If one of the operands is an object and the other is a primitive => <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion\">convert the object to a primitive</a> <br>\n- If one is Boolean => <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">convert the boolean to a number</a> <br>\n- If compare Number with String => <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">convert the string to a number</a> <br>\n\n\n<!-- ================================ 9. Strict equal (=== Algorithm)================================ -->\n\n<h3 id=\"9\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">9. Strict equal (=== Algorithm)</a></h3>\n\n<span style=\"color:red; font-weight:bold\">Case 1. If operands has same type </span><br>\nNumbers must have the same numeric values. +0 and -0 are considered to be the same value. <br>\nStrings must have the same characters in the same order. <br>\nBooleans must be both true or both false. <br> <br>\n\n\n\n<span style=\"color:red; font-weight:bold\">Case 2. If both operands differance type</span> <br>\nIf both operands are objects, return true only if they refer to the same object. <br>\nIf both operands are null or both operands are undefined, return true. <br>\nIf either operand is NaN, return false. <br>\n\n\n<!-- ================================ 10. JavaScript-Equality-Table ================================ -->\n\n<h3 id=\"10\">10. JavaScript Equality Table</h3>\n<iframe src=\"https://dorey.github.io/JavaScript-Equality-Table/\" height=\"1100px\" width=\"100%\" frameborder=\"0\"></iframe>\n\n<!-- ================================ Topic Ref ================================ -->\n\n<h3>Topic Ref</h3>\n<a href=\"https://tc39.es/ecma262/#sec-toprimitive\">Đặc tả kỹ thuật: toPrimitive()</a> <br>\n<a href=\"https://javascript.info/object-toprimitive\">JS Info</a> <br>\n<a href=\"https://viblo.asia/p/chuyen-doi-nguyen-thuy-voi-kieu-doi-tuong-4P856A0BlY3\">Bài viết Tiếng Việt</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">Primitive Datastructure</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">Primitive Glossary</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#literals\">Literals Detail</a> <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Xác định thứ tự ưu tiên</a> <br>\n",
    "headingMainContent": "      <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean Summary</a>\n    ",
    "methodHelper": [
        {
            "method": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>",
            "syntax": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>",
            "involved": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>",
            "description": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a></h3>\n\n- The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a> object overrides the toString method of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a>; it does not inherit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">Object.prototype.toString()</a>. <br>\n\n\n- For Boolean values, the toString method returns a string representation of the boolean value, which is either \"true\" or \"false\".",
            "index": 0
        },
        {
            "method": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\">Boolean.prototype.valueOf()</a></h3>\n",
            "syntax": "<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\">Boolean.prototype.valueOf()</a></h3>\n\n\n<pre class='js'><code  class=\"javascript\">// Example using method valueOf()\nconst example = new Boolean(); // argument is undefined === falsy (Boolean context convert into falsy)\nexample.valueOf() === false; \ntrue.valueOf === true; // true is Wrap by Boolean Object => can use all method of Boolean Object.\nfalse.valueOf === false; // false is Wrap by Boolean Object => can use all method of Boolean Object.\n</code></pre>",
            "involved": "Liên quan đến Boolean Context\n",
            "description": "<h3  class='red'><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\">Boolean.prototype.valueOf()</a></h3>\n\nThe valueOf() method of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a> returns the primitive value of a Boolean object or literal Boolean as a Boolean data type. <br>\n\n\n<br>\n<h3  class='red'>Đặc Tả: <a href=\"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-boolean.prototype.valueof\">ECMA ValueOf</a></h3>\n",
            "index": 1,
            "note": "<pre class='js'><code>\n// case 1\na || (b * c); // evaluate `a` first, then produce `a` if `a` is \"truthy\"\na && (b < c); // evaluate `a` first, then produce `a` if `a` is \"falsy\"\na ?? (b || c); // evaluate `a` first, then produce `a` if `a` is not `null` and not `undefined`\na?.b.c; // evaluate `a` first, then produce `undefined` if `a` is `null` or `undefined`\n\n// case 2\nfunction A() { console.log('called A'); return false; }\nfunction B() { console.log('called B'); return false; }\nfunction C() { console.log('called C'); return true; }\nconsole.log(C() || B() && A()); // called C => true\n\n// case 3\nconsole.log(A() && C() || B()); // called A => called B => false\n\n</pre></code>"
        }
    ],
    "referanceContent": "      <ol>\n        <li>\n          <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You Dont Need Lodash Underscore</a>\n        </li>\n        <li>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Mozilla\n            Array</a>\n        </li>\n        <li>\n          <a href=\"https://stephengrider.github.io/JSPlaygrounds/\">Playgrounds</a>\n        </li>\n        <li>\n          <a href=\"https://medium.com/frontend-canteen/with-these-articles-you-will-not-be-confused-when-learning-typescript-d96a5c99e229\">TS</a>\n        </li>\n        <li>\n          <a href=\"https://github.com/zloirock/core-js#ecmascript-array\">Core JS</a>\n        </li>\n        <li>\n          <a href=\"https://www.totaltypescript.com/tutorials\">TS totorial</a>\n        </li>\n      </ol>\n    "
}