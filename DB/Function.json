{"documentTitle":"Function - JavaScript | Note","HeadingOne":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">Function</a>","mainContent":"<!-- ================================ 0 . Content ================================ -->\n<h3>Content</h3>\n- <a href=\"#1\">1. Function Defination</a> <br>\n\n\n<!-- ================================ 1 . Function Defination  ================================ -->\n\n<h3 id=\"1\"><a href=\"\">1. Function Defination</a></h3>\n\n- Functions are instructions , When a function is called, it tells the computer, browser, JavaScript engine to do the work inside the function body. <br>\n- In JavaScript non-primitive types are objects, so that function is an object too. <br> <br>\n\n<diV class=\"center\"><img src=\"./Assets/ImageFunction_1/Function_Definition.png\" style=\"width: 40%;height: 40%;\" alt=\"function overview\"/></div> <br>\n\n\n\n<!-- ================================ 1.1 . Đối số ================================ -->\n\n<b class=\"red fs22\">- 1 Argument :</b> Đối số <br>\n- Đối số là các giá trị được truyền vào khi gọi hàm. <br>\n- Truyền dư đối số cho hàm => Không xảy ra lõi tuy nhiên chúng ta không thể sử dụng được giá trị đó bên trong function body. <br>\n- Truyền thiếu đối số cho hàm => Các đối số tương ứng không được truyền value vào Javascript ngầm định các tham số đó mang giá trị <b class=\"navy\">undefined</b>. <br>\n\n\n<!-- ================================ 1.2 . Tham số================================ -->\n\n<b class=\"red fs22\">- 2 Parameter :</b> Tham số <br>\n- Tham số là các biến được khai báo trong quá trình khai báo hàm. <br>\n- Tham số dùng để nhận gía trị của đối số để sử dụng bên trong hàm. <br> \n- Giá trị mặc định của đối số là undefined. <br>\n\n<b class=\"red fs22\">- 3 Default Parameter :</b> Giá trị mặc định của tham số. <br>\n- Giá trị của tham số sẽ là giá trị tương ứng được truyền vào bên trong hàm. <br>\n- Giá trị của tham số nếu không nhận được đối số sẽ là undefined. <br>\n- Để giá trị của tham số không phải là undefined khi không nhận được đối số thì cần sử dụng Default Parameter;<br>\n \n<b class=\"blue fs22\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\">- 4 Statement return [expression] :</a></b> Câu lệnh return <br>\n- Statement Return được sử dụng trong FunctionBody, khi nó được thực thi thì hàm sẽ kết thúc và trả về giá trị [expression] bên cạnh return key-word <br>\n- Nếu câu lệnh return bị bỏ qua bên trong FunctionBody, Javascript sẽ ngầm định return undefined;\n- If Statment Return is ommited, Javascript implicit return undefined;\n\n\n\n<!-- ================================ 2.   ================================ -->\n\n\n\n<!-- ================================ 3.  ================================ -->\n\n\n\n\n\n\n\n","headingMainTwo":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">Function Summary</a>","referanceContent":"<ol>\n <li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript\">Javascript on Mozilla</a></li>\n <li><a href=\"https://stephengrider.github.io/JSPlaygrounds/\">Playgrounds</a></li>\n <li><a href=\"https://sabe.io/classes/javascript/primitive-data-types/\">Style CSS</a></li>\n <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">Function Overview <--- Các loại function </a></li>\n\n <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions/\">Function Guilde <--- Giải thích về function </a></li>\n\n\n\n\n</ol>\n ","dataTable":{"dataTableHeader":[{"data":"STT","name":"STT","actionSrc":"./Assets/Icons/plus-icon.svg","index":0},{"data":"Method Name","name":"Method Name","actionSrc":"./Assets/Icons/plus-icon.svg","index":1},{"data":"Syntax","name":"Syntax","actionSrc":"./Assets/Icons/plus-icon.svg","index":2,"bg":""},{"data":"Involved","name":"Involved","actionSrc":"./Assets/Icons/plus-icon.svg","index":3},{"data":"Description","name":"Description","actionSrc":"./Assets/Icons/plus-icon.svg","index":4},{"data":"Action","name":"Action","actionSrc":null,"index":5}],"dataTableFirstRow":[{"name":"stt","data":"0","index":0},{"name":"method","data":"<textarea></textarea>","index":1,"bg":""},{"name":"syntax","data":"<textarea></textarea>","index":2,"bg":""},{"name":"involved","data":"<textarea></textarea>","index":3,"bg":""},{"name":"description","data":"<textarea></textarea>","index":4,"bg":""},{"name":"action","data":null,"index":5,"bg":""}],"dataTableBody":[[{"name":"stt","data":1,"index":0,"show":["default-home"]},{"name":"method","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">Declaration Function</a></h3>","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">Declaration Function</a></h3>\n\n<pre class=\"js\"><code class=\"javascript\">\nfunction functionName(param0, param1) {\n  statements\n}\n</code></pre>","index":2,"show":["detail","home"]},{"name":"involved","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">Declaration Function</a></h3>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>","index":3,"show":["detail","home"],"bg":""},{"name":"description","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">Declaration Function</a></h3>\n\n- Function Declaration hay còn được gọi là Function Statement, Được khai báo bằng từ khoá <b class=\"blue\">function</b> theo sau bắt buộc là <b class=\"blue\">function name</b>. <br>\n\n- Function statements require a function name, <b class=\"red\">missing will make syntax error</b> <br>\n\n- Function declaration <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">hoisting </a> but Note that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expressions</a> are not hoisted <br> \n\n- <a href=\"https://astexplorer.net/\">Compared Declaration Function and Expression Function</a>  <br>\n","index":4,"show":["detail","home"],"bg":""},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":"<b class=\"fs22 red\">Declaration Function<span> - </span><span class=\"blue\">Expression Function</span></b> <br>\n\n- <b class=\"blue fs20\">Declaration function : </b><br>\n- có từ khóa function <br>\n- có function name (bắt buộc) <br>\n- hoisting <br>\n- dùng để khai báo hàm <br>\n<pre><code>function declaration(){// this is declaration function }</code></pre>\n- phải khai báo trước, khi tạo object mới tham chiếu đến được <br>\n\n<pre><code>function declaration(){//khai báo trước => khi tạo object tham chiếu đến}\nconst obj = {abc: declaration}\n</code></pre> <br>\n\n\n- <b class=\"blue fs20\">Expression function with function name: </b><br>\n\n- có từ khóa function  <br>\n- có function name  <br>\n- hoisting to temporal deadzone <br>\n- dùng để khai báo hàm <br>\n<pre><code>const expression = function expression(){// this is expression function }</code></pre> \n- trực tiếp làm method của object mà không cần khai báo trước\n<pre><code>const obj = {abc: function expression(){console.log(222)}}</code></pre>\n- việc đặt tên cho hàm như vậy sẽ ứng dụng được đệ quy <br>\n\n\n- <b class=\"blue fs20\">Expression function without function name: </b><br>\n\n- có từ khóa function  <br>\n- không có function name  <br>\n- hoisting to temporal deadzone <br>\n- dùng để khai báo hàm <br>\n<pre><code>const expression = function(){// this is expression function }</code></pre>\n- trực tiếp làm method của object mà không cần khai báo trước\n<pre><code>const obj = {abc: function(){console.log(222)}}</code></pre>\n- không đặt tên cho hàm thì hàm đó sẽ mang tên mặc định là anonymous function.\n","index":6,"show":["detail"]}],[{"name":"stt","data":2,"index":0,"show":["default-home"]},{"name":"method","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">Expression Function</a></h3>","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">Expression Function</a></h3>\n\n<pre class=\"js\"><code class=\"javascript\">\nconst expressionFunction1 = function (){\n  statement; // function name is ommit => default: anonymous \n}\n\nconst expressionFunction2 = function functionName() {\n  statements; // function name is functionName\n}\n</code></pre>","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">Expression Function</a></h3>\n\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>","index":3,"show":["detail","home"]},{"name":"description","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">Expression Function</a></h3>\n\n- The main difference between a <b class=\"red\">function expression</b> and a <b class=\"blue\">function declaration</b> is the function name, which can be omitted in function expressions to create anonymous functions. <br>\n\n- Function declaration <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">hoisting </a> but Note that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expressions</a> are not hoisted <br> \n\n- <a href=\"https://astexplorer.net/\">Compared Declaration Function and Expression Function</a> <br>\n\n- Thường được ứng dụng dể khai báo method trong object\n\n<!-- ==== Ứng dụng  ==== -->\n\n<br>\nFunction Expression Vì Optional Name => Nên thường được dùng để khai báo phương thức bên trong Object hoặc Class.<br>\n\n<h3  class='red'>Ứng dụng Đệ Quy - <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function#named_function_expression'>Named function expression</a></h3>\n\n<pre class=\"js\"><code class=\"javascript\">// Ứng dụng \nconst math = {\n  factit: function factorial(n) {\n console.log(n)\n if (n <= 1) {\n   return 1;\n }\n return n * factorial(n - 1);\n  }\n};\n\nmath.factit(3) //3;2;1;\n</code></pre>\n\n<!-- Ứng dụng IIFE -->\n<h3  class='red'>Ứng dụng IIFE - <a href='https://developer.mozilla.org/en-US/docs/Glossary/IIFE'> Immediately Invoked Function Expression (IIFE)</a></h3>\n\n<pre class=\"js\"><code class=\"javascript\">// Ứng dụng \n(function (param0, param1) {\n  statements\n})();\n</code></pre>\n\n\n","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"name":"stt","data":3,"index":0,"show":["default-home"]},{"name":"method","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow Function</a></h3>\n","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow Function</a></h3>\n\n<pre class=\"js\"><code class=\"javascript\">\nconst arrowFunction = (param0, param1) => {\n  statements\n}\n\n(param0, param1) => expression\n\nasync (param0, param1) => expression\n</code></pre>","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow Function</a></h3>\n\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a> <br>\n\n","index":3,"show":["detail","home"]},{"name":"description","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow Function</a></h3>\n\n<b class=\"red\">Arrow Function</b> là cú pháp short-hand của <b class=\"navy\">Function Expression</b>. Loại bỏ <b class=\"blue\">function keyword và thay return bằng dấu mũi tên \"=>\"</b>. <br>\n\n<!-- Hạn chế -->\n\n- Arrow functions don't have their own bindings to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">arguments</a>, or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a>, and should not be used as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Method\">methods</a>. <br>\n\n- Arrow functions cannot be used as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Constructor\">constructors</a>. Calling them with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a> throws a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a>. They also don't have access to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a> keyword. <br>\n\n\n- Arrow functions cannot use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a> within their body and cannot be created as generator functions. <br>\n\n<!-- Ứng dụng IIFE -->\n<h3  class='red'>Ứng dụng IIFE - <a href='https://developer.mozilla.org/en-US/docs/Glossary/IIFE'> Immediately Invoked Function Expression (IIFE)</a></h3>\n\n<pre class=\"js\"><code  class=\"javascript\">// Ứng dụng \n((param0, param1) => expression )();\n((param0, param1) { statement })();\n</code></pre>\n","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":"- Arrow function là cú pháp shorthand của Function Expression => Loại bỏ từ khoá keyword, thay thế return bằng dấu mũi tên \"=>\" <br>\n\n- Arrow function không ràng buộc nó với this, đối số, super, không nên dùng nó làm method của object. <br>\n\n- Arrow function không thể là function constructor vì nó không thể truy cập từ khoá new.target => Cố tình sử dụng arrow function làm Function Constructor sẽ bị lỗi. <br>\n\n- Arrow function không thể sử dụng từ khoá Yield bên trong Arrow function body => Không thể dùng để làm function generator.","index":6,"show":["detail"]}],[{"name":"stt","data":4,"index":0,"show":["default-home"]},{"name":"method","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method</a></h3>","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method</a></h3>\n\n<pre class=\"js\"><code class=\"javascript\">function bar(){return 'bar'}\n\nconst obj = {\n  foo() {return 'foo'},\n  bar,\n};\n\nconsole.log(obj.foo()); // expected output: \"foo\"\nconsole.log(obj.bar()); // expected output: \"bar\"\n</code></pre>","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method</a></h3>\n\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">Generator methods</a> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">Async methods</a> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#async_generator_methods\">Async generator methods</a> <br>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a> <br>\n","index":3,"show":["detail","home"],"bg":""},{"name":"description","data":"Method is a function property in an object initializer.","index":4,"show":["detail","home"],"bg":""},{"name":"action","data":null,"index":5,"show":["default-home"],"bg":""},{"name":"note","data":"- <b class=\"fs22 blue\">Method description</b> <br>\n\n- Method là các hàm bên trong object, class. \n \n<img src=\"./Assets/Function/Object-description.png\" alt=\"object description\" class=\"center\" style=\"width:60%\"/>\n\n\n- <b class=\"fs22 blue\">Object Method SideEffect : </b><br>\n\n- Ví dụ dưới đây về method của một object gây ra Side-Effect. Nguyên nhân là method đã tham chiếu đến một function khác bên ngoài. <br>\n\n<pre><code class=\"javascript\">function abc(){console.log(333)};\nconst obj = {a:\"name\", method:abc}\nobj.method(); // log 444\nfunction abc(){console.log(444)};\nobj.method(); // log 444\nobj.method = function def(){console.log(555)}\nobj.method(); // log 555\nabc(); // log 444\n</code></pre> <br>\n\n\n- <b class=\"fs22 blue\">Object Method No SideEffect: </b><br>\n\n- Ví dụ dưới đây method của object không gây ra Side-Effect. Vì method là một function expression bên trong object. <br>\n\n<pre><code class=\"javascript\">const obj = {a:\"name\", method:function abc(){console.log(333)}}\nobj.method(); // log 333\nfunction abc(){console.log(444)};\nobj.method(); // log 333\nobj.method = abc\nobj.method() // log 444\n</code></pre>  <br>\n","index":6,"show":["detail"]}],[{"name":"stt","data":5,"index":0,"show":["default-home"]},{"name":"method","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">Immediately Invoked Function Expression - IIFE</a></h3>","index":1,"show":["detail","home"]},{"name":"syntax","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">Immediately Invoked Function Expression - IIFE</a></h3>\n\n<pre class=\"js\"><code  class=\"javascript\">//Ví dụ IIFE\n(function (param0, param1) {\n  statements\n})(); \n\n((param0, param1) => expression )();\n\n((param0, param1) { statement })();\n</code></pre>\n","index":2,"show":["detail","home"]},{"name":"involved","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">Immediately Invoked Function Expression - IIFE</a></h3>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow Function</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">Expression Function</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Function\">Function</a> <br>\n \n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Self-Executing_Anonymous_Function\">Self-Executing Anonymous Function</a>\n","index":3,"show":["detail","home"]},{"name":"description","data":"<h3><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">Immediately Invoked Function Expression - IIFE</a></h3>\n\n<b class=\"red\">IIFE</b> là một design pattern được biết đến như <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Self-Executing_Anonymous_Function\">Self-Executing Anonymous Function</a>","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":"It is a design pattern which is also known as a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Self-Executing_Anonymous_Function\">Self-Executing Anonymous Function</a>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE#the_module_pattern\">The Module Pattern</a>\n<pre class=\"js\"><code>\nconst makeWithdraw = (balance) =>\n  ((copyBalance) => {\n let balance = copyBalance; // This variable is private\n const doBadThings = () => {\n   console.log(\"I will do bad things with your money\");\n };\n doBadThings();\n return {\n   withdraw(amount) {\n  if (balance >= amount) {\n    balance -= amount;\n    return balance;\n  }\n  return \"Insufficient money\";\n   },\n };\n  })(balance);\n\nconst firstAccount = makeWithdraw(100); // \"I will do bad things with your money\"\nconsole.log(firstAccount.balance); // undefined\nconsole.log(firstAccount.withdraw(20)); // 80\nconsole.log(firstAccount.withdraw(30)); // 50\nconsole.log(firstAccount.doBadThings); // undefined; this method is private\nconst secondAccount = makeWithdraw(20); // \"I will do bad things with your money\"\nconsole.log(secondAccount.withdraw(30)); // \"Insufficient money\"\nconsole.log(secondAccount.withdraw(20)); // 0\n</code><pre>","index":6,"show":["detail"]}],[{"name":"stt","data":6,"index":0,"show":["default-home"]},{"name":"method","data":"Generatior Function ","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"Generatior Function ","index":2,"show":["detail","home"]},{"name":"involved","data":"Generatior Function ","index":3,"show":["detail","home"]},{"name":"description","data":"Generatior Function ","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"name":"stt","data":7,"index":0,"show":["default-home"]},{"name":"method","data":"Constructor Function ","index":1,"show":["detail","home"]},{"name":"syntax","data":"Constructor Function ","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"Constructor Function ","index":3,"show":["detail","home"]},{"name":"description","data":"Constructor Function ","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"name":"stt","data":8,"index":0,"show":["default-home"]},{"name":"method","data":"Currying Function ","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"Currying Function ","index":2,"show":["detail","home"]},{"name":"involved","data":"Currying Function ","index":3,"show":["detail","home"]},{"name":"description","data":"Currying Function ","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"name":"stt","data":9,"index":0,"show":["default-home"],"bg":"hsl(330.10563065778024,50%,50%)"},{"name":"method","data":"Getter & Setter là gì ","index":1,"show":["detail","home"],"bg":"hsl(330.10563065778024,50%,50%)"},{"name":"syntax","data":"Getter & Setter là gì ","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"Getter & Setter là gì ","index":3,"show":["detail","home"],"bg":"hsl(330.10563065778024,50%,50%)"},{"name":"description","data":"Getter & Setter là gì ","index":4,"show":["detail","home"],"bg":"hsl(330.10563065778024,50%,50%)"},{"name":"action","data":null,"index":5,"show":["default-home"],"bg":"hsl(330.10563065778024,50%,50%)"},{"name":"note","data":"<b class=\"blue fs20\">- Getter & Setter</b> <br>\n\n<pre class=\"js\"><code>const obj = {\n  set setName(name) {\n    this.name = name;\n  },\n  get getName() {\n    return this.name;\n  },\n};\n\nobj.setName = \"Dat\";\nobj.getName; // \"Dat\"\nobj.name; // \"Dat\"\nobj.name = \"Change\"\nobj.getName; // \"Change\"\nobj; // {name: 'Change'}\n</code><pre>","index":6,"show":["detail"]}],[{"name":"stt","data":10,"index":0,"show":["default-home"]},{"name":"method","data":"Async Function | Higher Order Function | Closures","index":1,"show":["detail","home"],"bg":""},{"name":"syntax","data":"Async Function | Higher Order Function | Closures","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"Async Function | Higher Order Function | Closures","index":3,"show":["detail","home"]},{"name":"description","data":"Async Function | Higher Order Function | Closures <br> \n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures","index":4,"show":["detail","home"],"bg":""},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"name":"stt","data":11,"index":0,"show":["default-home"]},{"name":"method","data":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a> <br>\n\n","index":1,"show":["detail","home"]},{"name":"syntax","data":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a> <br>\n\n","index":2,"show":["detail","home"],"bg":""},{"name":"involved","data":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a> <br>\n\n","index":3,"show":["detail","home"]},{"name":"description","data":"<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a><br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function Object</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function* statement</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a> <br> \n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>  <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a> <br>\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a> <br>\n\n","index":4,"show":["detail","home"],"bg":""},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"name":"stt","data":12,"index":0,"show":["default-home"]},{"name":"method","data":"Hoisting ","index":1,"show":["detail","home"]},{"name":"syntax","data":"Hoisting ->> https://developer.mozilla.org/en-US/docs/Glossary/Hoisting","index":2,"show":["detail","home"]},{"name":"involved","data":"var/let/const hoisting — <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_hoisting\">Grammar and types guide</a> <br>\nfunction hoisting — <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_hoisting\">Functions guide</a> <br>\nclass hoisting — <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_Classes#class_declaration_hoisting\">Classes guide</a> <br>\n\n\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">var statement</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let statement</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const statement</a>  <br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function statement</a>  <br>","index":3,"show":["detail","home"]},{"name":"description","data":"Hoisting ->> https://developer.mozilla.org/en-US/docs/Glossary/Hoisting","index":4,"show":["detail","home"]},{"name":"action","data":null,"index":5,"show":["default-home"]},{"name":"note","data":null,"index":6,"show":["detail"]}],[{"data":13,"index":"0","name":"stt","show":["default-home"]},{"data":"Closures","index":"1","name":"method","show":["home","detail"]},{"data":" ","index":"2","name":"syntax","show":["home","detail"]},{"data":" ","index":"3","name":"involved","show":["home","detail"]},{"data":"Closures\n\n<pre class=\"js\"><code>function init() {\n  var name = 'Mozilla'; // name is a local variable created by init\n  function displayName() {\n    // displayName() is the inner function, a closure\n    console.log(name); // use variable declared in the parent function\n  }\n  displayName();\n}\ninit();\n\n</code></pre>","index":"4","name":"description","show":["home","detail"],"bg":""},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"<b class=\"fs20 blue\">Variable - Memory</b> <br>\n\n- Biến được lưu trữ trong bộ nhớ RAM, bộ nhớ tạm thời được sử dụng để thực thi chương trình được gọi là bộ nhớ truy cập ngẫu nhiên (Random Access Memory - RAM). Khi một chương trình thực thi, hệ điều hành dành riêng một phần RAM vật lí của máy tính để chương trình sử dụng riêng. Đơn vị cơ bản của bộ nhớ này là byte. Như chúng ta đã biết tất cả các biến chỉ đơn giản là tập hợp của một số byte, ví duk 1 int là 4 byte, doube là 8 byte. <br>\n\n- Như bạn có thể thấy, trong khối bộ nhớ, mỗi byte có một địa chỉ \"Variable Address\" liên quan được đánh số bằng hệ thống đánh số thập lục phân. <br>\n\n<pre><code>//Demo in C\n#include <stdio.h>\nint main() {\n  int var = 5;\n  printf(\"var: %d\\n\", var);\n  // Notice the use of & before var \n  printf(\"address of var: %p\", &var); return 0;\n}\n\n===== Result =====\nvar: 5\naddress of var: 0x7ffd2e5e8424\n\n...Program finished with exit code 0\nPress ENTER to exit console.\n\n===== With Javascript =====\n\nvar username = \"duc do\";\nThis statement consists of a few parts: <br>\nThe declaration of a variable using the var keyword <br>\nThe variable name (or identifier), username <br>\nThe assignment operation, represented by the syntax <br>\nThe value being assigned, \"username\" <br>\n</code></pre>\n\n\n<!-- ====================================== Stack ====================================== -->\n\n<b class=\"fs20 blue\">Stack : Static memory allocation (Cấp phát bộ nhớ tĩnh)</b> <br>\n\n» A stack is a data structure that JavaScript uses to store static data. Static data is data where the engine knows the size at compile time. In JavaScript, this includes primitive values (strings, numbers, booleans, undefined, and null) and references, which point to objects and functions, array. <br>\nSince the engine knows that the size won't change, it will allocate a fixed amount of memory for each value. <br>\nThe process of allocating memory right before execution is known as static memory allocation. <br>\n\n<!-- ====================================== Heap ====================================== -->\n\n<b class=\"fs20 blue\">Heap: Dynamic memory allocation</b> <br>\n \n» The heap is a different space for storing data where JavaScript stores objects and functions. <br>\nUnlike the stack, the engine doesn't allocate a fixed amount of memory for these objects. Instead, more space will be allocated as needed. <br>\nAllocating memory this way is also called dynamic memory allocation. <br>","index":6,"show":["detail"]}],[{"data":14,"index":"0","name":"stt","show":["default-home"]},{"data":"https://youtubemultidownloader.net/","index":"1","name":"method","show":["home","detail"]},{"data":"https://youtubemultidownloader.net/","index":"2","name":"syntax","show":["home","detail"]},{"data":"https://youtubemultidownloader.net/","index":"3","name":"involved","show":["home","detail"]},{"data":"https://youtubemultidownloader.net/","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":15,"index":"0","name":"stt","show":["default-home"]},{"data":"Namaste Function","index":"1","name":"method","show":["home","detail"]},{"data":"Namaste Function","index":"2","name":"syntax","show":["home","detail"]},{"data":"Namaste Function","index":"3","name":"involved","show":["home","detail"]},{"data":"Namaste Function","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"<!-- ====================== Arguments & Parameters ======================== -->\n\n<b class=\"blue fs24\">Arguments & Parameters</b><br>\n\n\n<br>\n\n<br>\n\n\n\n\n<!-- ====================== Anonymous Function ======================== -->\n\n<b class=\"blue fs24\">Anonymous Function</b><br>\n\n- Anonymous function là một expression function không có tên, Anonymous function luôn phải được gán cho một biến. Nếu không sẽ bị lỗi vì Javascript sẽ hiểu lầm nó là function statement (mà fn statement bắt buộc function name) <br>\n- Arrow function xuất hiện trong ES6 - ECMAScript 2015 <br>\n- Anonymous function is a function expression without a name, and it should assign to variable if not will throw error because javascript will know it like function statement (require name) <Br>\n\n<pre class=\"js\"><code>// Example about anonymous function \nconst anonymousFunction1 = function(){\n   // do something\n}\n\nconst anonymousFunction2 = () => {\n   // do something\n}\n\nconst object = {\n    method1: () =>{ console.log(\"anonymous function\") },\n    method2: function (){ console.log(\"anonymous function\") }\n}\n</code></pre> <br>\n\n\n<!-- ====================== First Class Function ======================== -->\n\n<b class=\"blue fs24\">First Class Function</b><br>\n\n\n\n<!-- ====================== Function Statement ======================== -->\n\n<b class=\"blue fs24\">Function Statement</b><br>\n\n- Function statement là câu lệnh khai báo hàm \"Function declaration with function keywords\", trong đó function name là bắt buộc <br>\n- Function statement / Function Declaration : the function is normally defined and can be used later on. <br>\n- Function is created by function statement can do the Hoisting <br>\n\n<pre class=\"js\"><code>// Function Statement Example\nfunction functionStatement(){\n      console.log(\"this is function statement\");\n}\n</code></pre>\n\n\n\n<!-- ====================== Function Expression ======================== -->\n\n<b class=\"blue fs24\">Function Expression</b><br>\n \n- Function expression có hai loại : 1 Function Expression has function name - 2 Function Expression hasn't function name <br>\n- 1 Function Expression Named <br>\n- 2 Function Expression Anonymous <br> <br>\n\n\n- Function expression : the function is first created and assigned to a variable so that it can be called by its variable name <br>\n- Function Expression can not do Hoisting  <br>\n\n\n<pre class=\"js\"><code>// Function ExpressionExample\n\nconst functionExpression1 = function(){\n      console.log(\"this is function expression also know as function anonymous\");\n}\n\nconst functionExpression2 = function fnName(){\n      console.log(\"this is function expression\");\n      fnName(); // This is also Recursing Function\n}\n\nconst functionExpression3 = () => {\n      console.log(\"this is function expression also know as function anonymous\");\n}\n</code></pre> <br>\n\n<!-- ====================== First Class Function === First Class Citizens  ======================== -->\n\n<b class=\"blue fs24\">First Class Function === First Class Citizens</b><br>\n- Javascript là ngôn ngữ First Class Functions \n\n- First Class Functions -> The ability to to use functions as values and which can be passed as arguments to another function, and also can be returned from functions. <br>\n- First class Functions / first class citizens :  <br>\n1) used as values <br>\n2) can be passed as argument <br>\n3) can be executed inside a closured function <br>\n4) can be taken as return <br>\n\n<br>\n","index":6,"show":["detail"]}],[{"data":16,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"blue fs20\">CallBack Function</b>","index":"1","name":"method","show":["home","detail"]},{"data":"<b class=\"blue fs20\">CallBack Function</b>","index":"2","name":"syntax","show":["home","detail"]},{"data":"<b class=\"blue fs20\">CallBack Function</b>","index":"3","name":"involved","show":["home","detail"]},{"data":"<b class=\"blue fs20\">CallBack Function</b>","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"<!-- ====================================== Callback function ====================================== -->\n<b class=\"blue fs20\">CallBack Function</b> <br>\n \n- Chúng ta có thuật ngữ <b class=\"blue\">CallBack</b> bởi vì Javascript là ngôn ngữ <b class=\"blue\">First Class Function. </b> <br>\n\n- <b class=\"blue\">Callback</b> thật chất là một hàm được truyền vào bên trong hàm khác thông qua đối số, <b class=\"blue\">Callback</b> sẽ được thực hiện bên trong hàm đó. <br> \n\n- Chính vì sự đặc biệt đó nên nó được người ta đặt cho một cái tên là <b class=\"blue\">Callback</b> để phân biệt với những hàm khác <br>\n\n- <b class=\"blue\">Callback</b> còn được chia thành <b class=\"red\">Synchronous Callback </b> và <b class=\"blue\"> Asynchronous Callback </b> <br>\n\n<details><summary><b class=\"blue\">FIRST CLASS FUNCTION</b> </summary>\n\n- Javascript là ngôn ngữ First Class Functions hay First Class Citizens, Nghĩa là nó có những khả năng sau đây: <br>\n\n1) function được sử dụng như một value, có thể gán vào biến <br>\n2) function có thể truyền vào một function khác thông qua đối số <br>\n3) function có thể thực thi bên trong function khác <br>\n4) function có thể được trả về bằng từ khóa return <br>\n</details>\n\n\n<details><summary>ENG</summary>\n\n- We have the terms <b class=\"blue\">Callback</b> Function because Javascript is First Class Function, so we can pass a function into another function. <br>\n\n- A <b class=\"blue\">Callback</b> function is a function which is passed into another function as an argument, abd it will be invoked sometime later inside the outer function <br>\n\n- First Class Functions -> The ability to to use functions as values and which can be passed as arguments to another function, and also can be returned from functions. <br>\n- First class Functions / first class citizens :  <br>\n1) used as values <br>\n2) can be passed as argument <br>\n3) can be executed inside a closured function <br>\n4) can be taken as return <br>\n</details>\n\n\n<pre class=\"js\"><code class=\"javascript\">// Example\nsetTimeout(callbackFn, time);\n\nfunction wakeMeUp(){\n   Making noisy sound to wake up\n}\n\nsetTimeout( wakeMeUp , 5Hours ) \n\n- After 5 Hours execute function wakeMeUp => Make a noisy sound\n</code></pre>\n\n\n<b class=\"red fs22\">1 - Asynchronous Callback : </b> <br> \n\n- Note, however, that <b class=\"blue\">Callback</b>  are often used to continue code execution after an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Asynchronous\">asynchronous</a> operation has completed — these are called asynchronous callbacks. A good example is the <b class=\"blue\">Callback</b>  functions executed inside a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">.then()</a> block chained onto the end of a promise after that promise fulfills or rejects. This structure is used in many modern web APIs, such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\">fetch()</a>. <br> <br>\n\n- <b class=\"blue\">Callback</b> thường được sử dụng để tiếp tục thực thi code sau khi một hoạt động bất đồng bộ được hoàn thành => <b class=\"blue\">Callback</b>  được gọi là Asynchronous Callback <br> <br>\n\n\n<b class=\"red fs22\">2 - Synchrnous Callback :</b> <br>\n\n- Ngoài Asynchronous Callback chúng ta còn có Synchronous Callback.  \n- Synchronous Callback thường được ứng dụng để \n-\n-\n- Example Synchronous Callback <br>\n\n<pre><code class=\"javascript\">function calculate(num1, num2, callbackFunction) {\n    return callbackFunction(num1, num2);\n}\n\nfunction calcProduct(num1, num2) {\n    return num1 * num2;\n}\n\nfunction calcSum(num1, num2) {\n    return num1 + num2;\n}\n// alerts 75, the product of 5 and 15\nalert(calculate(5, 15, calcProduct));\n// alerts 20, the sum of 5 and 15\nalert(calculate(5, 15, calcSum));\n</code></pre>\n\n","index":6,"show":["detail"]}],[{"data":17,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"blue fs22\">Promise</b>","index":"1","name":"method","show":["home","detail"]},{"data":"<b class=\"blue fs22\">Promise</b>","index":"2","name":"syntax","show":["home","detail"]},{"data":"<b class=\"blue fs22\">Promise</b>","index":"3","name":"involved","show":["home","detail"]},{"data":"<b class=\"blue fs22\">Promise</b>","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"],"bg":""},{"name":"note","data":"<!-- ======================================= Promise ======================================= -->\n<b class=\"fs22 blue\">Promise</b> <br>\n- Để giải quyết các vấn đề bất đồng bộ JavaScript đơn giản chúng ta có thể sử dụng <b class=\"blue\">CallBack</b>, Tuy nhiên khi có nhiều tác vụ bất đồng bộ phải lồng vào nhau dẫn đến hiện tượng <b class=\"red\">CallBack Hell</b>. Vì vậy từ ES6 chúng ta đã có thêm khái niệm là <b class=\"blue\">Promise</b> <br>\n\n- Promise object đại diện cho việc hoàn thành kết quả (hoặc sự thất bại) từ của một hoạt động bất đồng bộ, và giá trị kết quả của lệnh đó. <br>  \n\n- Mục đích của Promise là cơ chế của nó giúp bạn thực hiện các tác vụ đồng bộ hơn và tránh rơi vào tình trạng callback hell hay pyramid of doom, là tình trạng dùng các callback lồng nhau quá nhiều <br> \n\n- Promise được trả về từ các API như fetch  <br>\n\n<b class=\"fs22 blue\">Promise State</b><br>\nPromise có 3 trạng thái : <br>\n- pending: trạn thái ban đầu, không thành công cũng không thất bại <br>\n- fulfilled: trạng thái thành công.<br>\n- rejected: trạng thái thất bại.<br>\n\n<!-- ======================================= Promise Code Example ======================================= -->\n\n<pre class=\"js\"><code>// Example About Promise \nconst alarmPromise = function(time){\n    return new Promise((resolve) => {\n        setTimeout(() => {resolve(\"Promise: Ring ring ring\")} ,time)\n    })\n}\n\nalarmPromise(5000).then(res => {\n    console.log(res)\n});\n\n// Example About Callback\nconst alarmCB = function(time,cb){\n    setTimeout(() => cb(\"CallBack: ring ring ring\"),time)\n}\n\nalarmCB(8000,(data)=>{console.log(data)})\n</code></pre> <br>\n<!-- ======================================= Compare Promise And CallBack ======================================= -->\n\n<b class=\"fs22 blue\">Promise And CallBack</b><br>\n\n- Kết quả thu được từ <b class=\"red\">CallBack</b> và <b class=\"blue\">Promise</b> đều như nhau. <br>\n\n- Về mặt cú pháp thì có vẻ như <b class=\"red\">CallBack</b> sẽ dễ hơn <b class=\"blue\">Promise</b>, Tuy nhiên <b class=\"blue\">Promise</b> sẽ giải quyết được vấn đề <b class=\"red\">CallBack Hell</b> <br>\n\n- Đối với <b class=\"red\">CallBack</b> thì việc định nghĩa sẽ khó hơn một chút tuy nhiên khi sử dụng lại dễ hơn. Chỉ cần gọi hàm sau đó truyền <b class=\"red\">CallBack</b> vào bên trong phương thức then  <br>\n\n\n<!-- ======================================= English - Promise ======================================= -->\n\n<details><summary>ENG - PROMISE</summary>\n\n<b class=\"fs22 blue\">Promise</b> <br>\nThe Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.<br>\n\n<b class=\"fs22 blue\">Promise State</b><br>\n\nA Promise is in one of these states:<br>\n\n- pending: initial state, neither fulfilled nor rejected.<br>\n- fulfilled: meaning that the operation was completed successfully.<br>\n- rejected: meaning that the operation failed.<br>\n\n\n</details>\n\n","index":6,"show":["detail"]}]]}}