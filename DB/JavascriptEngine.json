{"documentTitle":"JS Engine | Note","HeadingOne":"<a href=\"\">Javascript Engine</a>","mainContent":"<!-- ================================ 0 . Content ================================ -->\n<h3>Content</h3>\n- <a href=\"#1\">1. Excution Conetxt</a> <br>\n- <a href=\"#1\">1. Excution Conetxt</a> <br>\n- <a href=\"#1\">1. Excution Conetxt</a> <br>\n- <a href=\"#1\">1. Excution Conetxt</a> <br>\n\n<!-- ================================ 1 - Excution Conetxt  ================================ -->\n\n<b class=\"heading red fs22\">1 - Excution Conetxt :</b>\n\n- Everything in Javascript happens inside <b class=\"blue fs22\">Execution Context</b> <br>\n- Mọi hoạt động của Javascript đều diễn ra bên trong một bối cảnh gọi là <b class=\"blue fs22\">Execution Context</b> <br>\n\n\n<!-- ================================ 2.   ================================ -->\n\n\n<!-- ================================ 3. JavaScript Runtime Environment ================================ -->\n<b class=\"heading red fs22\">2 - JavaScript Runtime Environment :</b> <br>\n\n<img class=\"center\" style=\"width:50%\" src=\"https://vahid.blog/post/2021-03-21-understanding-the-javascript-runtime-environment-and-dom-nodes/jsRuntimeEnvironment_hufc6622042c18be00aa4535dddfa9305a_166610_1ca39972dbb2ec0390325362a63db04d.jpg\" >\n<b class=\"center\"><a href=\"https://vahid.blog/post/2021-03-21-understanding-the-javascript-runtime-environment-and-dom-nodes/jsRuntimeEnvironment.pdf\">Download PDF of JS Runtime Environment</a></b> <br>\n\n<b class=\"purple\">1 - JavaScript Runtime Environment </b> <Br>\n\n- Javascript Runtime Environment là nơi mà chương trình được chạy. Tuỳ theo từng Runtime Environment sẽ có có Global Object khác nhau <br>\n- 1. Node Runtime Environment: chúng ta chỉ có thể chạy được File Javascript, Và Global Object là global. <Br>\n- 2. Browser Runtime Environment: chúng ta có thể chạy được File HTML, CSS, Javascript, Global Object là window, Về cơ bản Browser Runtime Environment sẽ bao gồm: <br>\n- The JavaScript engine (which in turn is made up of the heap and the call stack) <br>\n- Web APIs <br>\n- The callback queue <br>\n- The event loop <br>\n\n\n\n<details><summary><b class=\"red\">ENG - Runtime Environment</b></summary>\n- A runtime environment is where your program will be executed. JavaScript code may be executed in one of two runtime environments: <Br>\n- A browser’s runtime environment: Like <a target=\"_blank\" href=\"https://www.google.com/chrome/\">Chrome</a>, or <a target=\"_blank\" href=\"https://www.mozilla.org/en-US/firefox/\">Firefox</a> <Br>\n- The Node Runtime Environment <Br>\n- In each of these environments, different data values and functions are available, and these differences help distinguish front-end applications from back-end applications. <Br>\n- Front-end JavaScript applications are executed in a browser’s runtime environment and have access to the window object. <Br>\n- Back-end JavaScript applications are executed in the Node runtime environment and have access to the file system, databases, and networks attached to the server. <Br>\n</details>\n\n<!-- ================================ 4. JSEngine================================ -->\n\n<b class=\"purple\">2 - JavaScript Engine </b> <Br>\n\n- The JavaScript Engine is what we typically associate with executing JS code, and accessing behavior contained in .js files. This engine has two components: a call stack and a memory heap. <br>\n\n- This engine has two components: a call stack and a memory heap. The engine is single-threaded. <br>\n\n<img class=\"center\" src=\"./Assets/Jsengine/v8-engine.png\" alt=\"v8-engine\">\n<b class=\"center blue\">V8 Engine</b><br>\n\n<details><summary><b class=\"red\">ENG - JSEngine</b></summary>\n- \n</details>\n\n<!-- ================================ 4. ================================ -->\n<hr>\n<img class=\"center\" style=\"width:50%\" src=\"https://vahid.blog/post/2021-03-21-understanding-the-javascript-runtime-environment-and-dom-nodes/prototypalChain_hud38aef222b9c3c55c436d81a008a49ed_411099_1200x1200_fit_q75_lanczos.jpg\" >\n<b class=\"center\"><a href=\"https://vahid.blog/post/2021-03-21-understanding-the-javascript-runtime-environment-and-dom-nodes/prototypalChain.pdf\">Download PDF of DOM Prototypal Chain</a></b>\n\n\n\n","headingMainTwo":"<a href=\"\">Javascript Engine</a>","referanceContent":"<ol>\n <li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript\">Javascript on Mozilla</a></li>\n <li><a href=\"https://stephengrider.github.io/JSPlaygrounds/\">Playgrounds</a></li>\n <li><a href=\"https://pythontutor.com/\">Global context visuallize</a></li>\n <li><a href=\"https://javascriptkicks.com/stories\">Javascript Kick</a></li>\n <li><a href=\"https://www.youtube.com/watch?v=pN6jk0uUrD8&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&ab_channel=AkshaySaini\">Youtube/Namaste JavaScript - Akshay Saini</a></li>\n <li><a href=\"https://viblo.asia/p/hieu-scope-va-context-trong-javascript-3P0lPArm5ox\">Viblo - Scope & Context</a></li>\n <li><a href=\"http://ryanmorr.com/understanding-scope-and-context-in-javascript/\">Ryanmorr - Blog</a></li>\n <li><a href=\"https://dev.to/narottam04\">Narottam Sahu - Dev.to</a></li>\n <li><a href=\"https://blog.webdrip.in/\">Narottam Sahu - Blog</a></li>\n <li><a href=\"https://www.theconsolelogs.com/logs/advanced-js/#javascript-engine\">The Console - Blog</a></li>\n <li><a href=\"https://nguyenbinhson.com/tag/javascript/\">NguyenBinhSon - Blog</a></li>\n <li><a href=\"https://www.javascripttutorial.net/\">Javascript Tutorial</a></li>\n <li><a href=\"https://vahid.blog/post/2021-03-21-understanding-the-javascript-runtime-environment-and-dom-nodes/\">Vahid - Blog</a></li>\n</ol>","dataTable":{"dataTableHeader":[{"data":"STT","name":"STT","actionSrc":"./Assets/Icons/plus-icon.svg","index":0},{"data":"Method Name","name":"Method Name","actionSrc":"./Assets/Icons/plus-icon.svg","index":1},{"data":"Syntax","name":"Syntax","actionSrc":"./Assets/Icons/plus-icon.svg","index":2,"bg":""},{"data":"Involved","name":"Involved","actionSrc":"./Assets/Icons/plus-icon.svg","index":3,"bg":""},{"data":"Description","name":"Description","actionSrc":"./Assets/Icons/plus-icon.svg","index":4},{"data":"Action","name":"Action","actionSrc":null,"index":5}],"dataTableFirstRow":[{"name":"stt","data":"0","index":0},{"name":"method","data":"<textarea></textarea>","index":1,"bg":""},{"name":"syntax","data":"<textarea></textarea>","index":2,"bg":""},{"name":"involved","data":"<textarea></textarea>","index":3,"bg":""},{"name":"description","data":"<textarea></textarea>","index":4,"bg":""},{"name":"action","data":null,"index":5}],"dataTableBody":[[{"data":1,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"fs20 blue\">Syntax Parser</b>","index":"1","name":"method","show":["home","detail"],"bg":""},{"data":"Syntax Parser","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"Syntax Parser","index":"3","name":"involved","show":["home","detail"]},{"data":"Syntax Parser","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":2,"index":"0","name":"stt","show":["default-home"],"bg":"hsl(178.587283112944,50%,50%)"},{"data":"Execution Context in JS","index":"1","name":"method","show":["home","detail"],"bg":"hsl(178.587283112944,50%,50%)"},{"data":"Execution Context in JS","index":"2","name":"syntax","show":["home","detail"],"bg":"hsl(178.587283112944,50%,50%)"},{"data":"Execution Context in JS","index":"3","name":"involved","show":["home","detail"],"bg":"hsl(178.587283112944,50%,50%)"},{"data":"Execution Context in JS","index":"4","name":"description","show":["home","detail"],"bg":"hsl(178.587283112944,50%,50%)"},{"data":null,"index":"5","name":"action","show":["default-home"],"bg":"hsl(178.587283112944,50%,50%)"},{"name":"note","data":"<!-- ================================ Context Enviroment ================================ -->\n\n\n\n<b class=\"fs24 blue\">1 - Global Excution Context : <a href=\"http://ryanmorr.com/understanding-scope-and-context-in-javascript/\">[Tham Khảo]</a> </b> <br>\n\n- Mọi hoạt động của Javascript đều diễn ra bên <b class=\"blue fs22\">Execution Context</b> \"bối cảnh thực thi mã\"<br>\n\n- Javascript là ngôn ngữ đơn luồng, nghĩa là nó chỉ có thể xử lý một tác vụ một lần. Khi mà trình thông dịch Javascript lần đầu tiên chạy, nó sẽ đi vào bối cảnh thực thi toàn cầu theo mặc định. <br>\n\n- Mỗi lần gọi hàm từ thời điểm này trở đi sẽ dẫn đến việc tạo ngữ cảnh thực thi mới. <br>\n\n- Bước đầu tiên khi tạo bối cảnh thực thi toàn cầu, trình duyệt thực thi mã Javascript theo 2 giai đoạn. <br> <br>\n\n\n<b class=\"fs20 purple\">Step 1 - Memory Creation Phase in Execution Context - Giai đoạn Creation Phase - ---------------------------------------Giai đoạn cấp phát bộ nhớ. </b> <br>\n\n- Giai đoạn này JavaScript sẽ quét qua tất cả mã và lưu các biến và function vào <b class=\"blua fs22\">Memory Zone</b>. <br>\n- Đối với biến Var : Lưu vào Memory Zone và gán giá trị là undefined  <br>\n- Đối với function : Lưu toàn bộ code của function vào Memory Zone <br>\n\n\n<b class=\"fs20 purple\">Step 2 - Code Execution Phase in Execution Context - Giai đoạn thực thi code. </b> <br>\n- Giai đoạn thực thi mã, Javascript sẽ thực thi từng dòng mã. <br>\n- Giá trị của a lúc này đang là undefined => Khi gặp var a = 2, nó sẽ gán 2 cho biến a trong bộ nhớ. <br>\n- Giá trị của b lúc này đang là undefined => Khi gặp var a = 4, nó sẽ gán 4 cho biến b trong bộ nhớ. <br>\n- Giá trị của sum lúc này đang là undefined => Khi gặp var sum = a + b, nó sẽ gán 6 cho biến sum trong bộ nhớ. <br> <br>\n\n\n<b class=\"fs22 red\">Visualize By Image</b><a href=\"https://pythontutor.com/\"> - Global context visuallize</a> <br>\n\n<pre class=\"js\"><code>var a = 2;\nvar b = 4;\n\nvar sum = a + b;\n\nconsole.log(sum);\n</code></pre> <br> <br>\n\n\n\n\n<!-- ================================ Execution Context Visualize ================================ -->\n\n<b class=\"fs20 center purple\">Global Context - Visualize Excution Context </b> <br>\n\n<div class=\"center\">\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fPjnibrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq3ufd0eru2ceax067m9.gif\" alt=\"Execution context 1.1\" loading=\"lazy\" style=\"width:50%\"  >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WmYga0PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ty49vslo873hpehxdrw.gif\" alt=\"Execution context 1.2\" loading=\"lazy\" style=\"width:50%\"  >\n</div>\n\n<hr>\n\n<b class=\"fs20 center purple\">Global Context - Visualize Excution Context</b> <br>\n\n<div class=\"center\">\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GKNbYzk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68nk5l6806bax94k0tky.gif\" alt=\"Execution context 1.3\" loading=\"lazy\" style=\"width:50%\"  >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Z5ZMX2Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvfyis150o3i7bn1x6hy.gif\" alt=\"Execution context 1.5\" loading=\"lazy\" style=\"width:50%\"  >\n\n</div>\n\n<div class=\"center\">\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BrZHpOr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e67rsojvcqmowwj3w75b.gif\" alt=\"Execution context 1.5\" loading=\"lazy\" style=\"width:50%\"  >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NfH3YlZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zu35q2as6uy57qve9q.gif\" alt=\"Execution context 1.6\" loading=\"lazy\" style=\"width:50%\"  >\n\n</div>\n\n<!-- ================================ Excution Context In English ================================ -->\n\n<details><summary>ENG</summary>\n- JavaScript is a single threaded language, meaning only one task can be executed at a time. When the JavaScript interpreter initially executes code, it first enters into a global execution context by default. Each invocation of a function from this point on will result in the creation of a new execution context. <br>\n\n- The browser creates a global execution context with two components, namely memory and code components. The Browser will execute the JavaScript code in two-phase: <br> <br>\n\n 1> Memory Creation Phase <br>\n\nIn the memory creation phase, JavaScript will scan through all the code and allocate memory to all the variables and functions in the code. For variables, JavaScript will store undefined in the memory creation phase, and for functions, it will keep the entire function code, which we will be looking at the following example. <br> <br>\n\n\n 2> Code Execution Phase <br>\n\n\nNow, in the 2nd phase, i.e. code execution, it starts going through the whole code line by line.\n\nAs it encounters var a = 2, it assigns 2 to 'a' in memory. Until now, the value of 'a' was undefined.\n\nSimilarly, it does the same thing for the b variable. It assigns 4 to 'b'. Then it calculates and stores the value of the sum in memory which is 6. Now, in the last step, it prints the sum value in the console and then destroys the global execution context as our code is finished.\n\n\n</details>\n\n\n\n\n<!-- ================================ Call Stack  ================================ -->\n\n<b class=\"fs24 blue\">2 - Call Stack : <a href=\"http://ryanmorr.com/understanding-scope-and-context-in-javascript/\">[Tham Khảo]</a> </b> <br>\n\n\n- Khi một hàm được gọi trong JavaScript, JavaScript sẽ tạo ngữ cảnh thực thi. Bối cảnh thực thi sẽ trở nên phức tạp khi chúng ta lồng các hàm bên trong một hàm. <br>\n- JavaScript quản lý việc tạo và xóa bối cảnh thực thi mã với sự trợ giúp của Call Stack. <br> \n\n\n\n<b class=\"fs22 red\">Visualize By Image</b><a href=\"https://pythontutor.com/\"> - Global context visuallize</a> <br>\n\n<pre class=\"js\"><code>function a() {\n    function insideA() {\n        return true;\n    }\n    insideA();\n}\na();\n</code></pre> <br>\n\n<div class=\"center\">\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hLhHObuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03bry7soja8z3ad143ry.gif\" alt=\"Call Stack\" loading=\"lazy\" style=\"width:50%\" >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LjUZjJan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idywyfc19t2vsf1nyww1.png\" alt=\"Call Stack\" loading=\"lazy\" style=\"width:51.8%\" > <br>\n\n</div>\n<!-- ================================ Call Stack In English ================================ -->\n\n\n<details><summary>ENG</summary>\n\nWhen a function is invoked in JavaScript, JavaScript creates an execution context. Execution context will get complicated as we nest functions inside a function.\n\n</details>\n\n- Cụ thể : Javascript sẽ lưu biến và function vào <b class=\"blue fs20\">Memory Zone (Variable Enviroment: Memory Stack - Memory Heap)</b> <br>\n- Đối với các biến lưu giá trị primitive type, Javascript sẽ lưu nó vào <b class=\"red fs22\">Memory Stack</b> và gán cho nó giá trị là <b class=\"red fs22\">Undefined</b>\n- Đối với các biến lưu giá trị referance type, Javascript sẽ tạo đối tượng đó ở <b class=\"red fs22\">Memory Heap</b>, tạo ra Memory Address từ đó có thể truy cập và sử dụng đối tượng đó.<br>\n\n<!-- ================================ Call Stack In English ================================ -->\n\n- Quên release memory bên tron heap sẽ có cái tên là memory leak <br>\n","index":6,"show":["detail"]}],[{"data":3,"index":"0","name":"stt","show":["default-home"]},{"data":"Lexical Enviroment / Lexical Scope","index":"1","name":"method","show":["home","detail"],"bg":""},{"data":"Lexical Enviroment / Lexical Scope","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"Lexical Enviroment / Lexical Scope","index":"3","name":"involved","show":["home","detail"],"bg":""},{"data":"Lexical Enviroment / Lexical Scope","index":"4","name":"description","show":["home","detail"],"bg":""},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"Lexical Enviroment có nghĩa là nơi mà đoạn code của bạn được viết <br>\n\n\n-  <br>\n\n<pre class=\"js\"><code>#index.js\nvar a = 10;\n\nfunction hello(){\n  console.log(\"Hello world !\")\n}\n\nconsole.log(\"Finished\") \n\n- Lexical Enviroment của biến a là nằm trong file index.js\n- Lexical Enviroment của function hello là nằm trong file index.js\n- Lexical Enviroment của câu lệnh console.log(\"Finished\") là nằm trong file index.js\n- Lexical Enviroment của câu lệnh console.log(\"hello world !\") là nằm trong function hello / function scope\n</code></pre>\n \n","index":6,"show":["detail"]}],[{"data":4,"index":"0","name":"stt","show":["default-home"]},{"data":"For...lóps block ","index":"1","name":"method","show":["home","detail"]},{"data":"For...lóps block ","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"For...lóps block ","index":"3","name":"involved","show":["home","detail"]},{"data":"For...lóps block ","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":5,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"fs20 blue\">Variable Scope</b>","index":"1","name":"method","show":["home","detail"],"bg":""},{"data":"<b class=\"fs20 blue\">Var</b>\n\n<pre class=\"js\"><code>//Var Scope\n\nif(false){\n  var number1 = 1000;\n}\nconsole.log(number1) // undefined\nconsole.log(number2) // referance error number2 isn't defined\n\n\n</code></pre>","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"<b class=\"fs20 blue\">Let</b>\n\n<pre class=\"js\"><code>//Let Scope\n\nif(false){\n  let number1 = 1000;\n}\nconsole.log(number1) \n// referance error number1 isn't defined\nconsole.log(number2) \n// referance error number2 isn't defined\n</code></pre>","index":"3","name":"involved","show":["home","detail"],"bg":""},{"data":"<b class=\"fs20 blue\">Const</b>\n\n<pre class=\"js\"><code>//Let Scope\n\nif(false){\n  const number1 = 1000;\n}\nconsole.log(number1) \n// referance error number1 isn't defined\nconsole.log(number2) \n// referance error number2 isn't defined\n</code></pre>","index":"4","name":"description","show":["home","detail"],"bg":""},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":6,"index":"0","name":"stt","show":["default-home"]},{"data":"Stack & Heap","index":"1","name":"method","show":["home","detail"]},{"data":"Stack & Heap","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"Stack & Heap","index":"3","name":"involved","show":["home","detail"]},{"data":"Stack & Heap","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"<b class=\"blue fs22\">1 - Stack & Heap</b><br>\n\n\n\n\n\n<b class=\"blue fs22\">2 - Mutatable & Immutate</b><br>\n\n","index":6,"show":["detail"]}],[{"data":7,"index":"0","name":"stt","show":["default-home"]},{"data":"Global Variable","index":"1","name":"method","show":["home","detail"]},{"data":"Tại sao không nên dùng global variable ","index":"2","name":"syntax","show":["home","detail"]},{"data":" Read more global variable are bad","index":"3","name":"involved","show":["home","detail"],"bg":""},{"data":" https://viblo.asia/p/introduction-of-maintainable-javascript-avoid-globals-zNPVMaN5GQOk","index":"4","name":"description","show":["home","detail"],"bg":""},{"data":null,"index":"5","name":"action","show":["default-home"],"bg":""},{"name":"note","data":"<!-- ========================= 1 - Global Variable =========================== -->\n\n<b class=\"red fs24\">1 - Global Variable :</b> <br>\n\n- Biến toàn cầu hay còn được gọi với cái tên khác là Global varialbe, Khuyến cáo chúng ta không nên sử dụng Global Variable. <br>\n- Biến toàn cầu được sinh ra tại Global Execution Context & Global Scope đối tới từ khóa let, const <br>\n- Biến toàn cầu được sinh ra tại Global Excution Context & Global Scope || Block Scope đối với từ khóa var <br>\n\n<!-- ========================= 1.1 - Global Variable  - ENG =========================== -->\n\n<details><summary>ENG</summary>\n- A Global variable is a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Variable\">variable</a> that is declared in the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Global_scope\">Global Scope</a> in other words, a variable that is visible from all other scopes. [MDN]\n<br>\n\n- A Global Object is an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Object\">Object</a> that always exists in the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Global_scope\">Global Scope</a>.<br>\n</details> <br>\n\n<!-- ========================= 1.2 - Global Variable - Example Code =========================== -->\n\n\n<pre class=\"js\"><code>// Global Variable was created in global scope\nconst globalVariable_const = 1000;\nlet globalVariable_let = 2000;\nvar globalVariable_var = 3000;\n\n// Global Variable was created in blockscope\nif(true)){\n  var globalVariable_var = 4000;\n  let scopeVariable_const = 5000;\n  const scopeVariable_let = 6000;\n}\n\nconsole.log(globalVariable_var) // Vì globalVariable_var là biến Global => Có thể truy cập được bên ngoài scope.\nconsole.log(scopeVariable_const) // Referance Error => is not defined\nconsole.log(scopeVariable_let ) // Referance Error  => is not defined\n</code></pre>\n\n\n\n\n<!-- ========================= 2 - Property of Global Object =========================== -->\n\n\n<b class=\"red fs24\">2 - Property of Global Object:</b> <br>\n\n- Biến toàn cầu được khai báo bằng từ khóa <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">Var</a>. Tạo ra một thuộc tính mới bên trong Global Object. <br>\n- Các function declarations được khai báo ở Global Execution Context cũng tạo ra <br>\n\n\n<!-- ========================= 2.1 - Property of Global Object - ENG  =========================== -->\n\n<details><summary>ENG</summary>\n- <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">Var</a> statements and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function declarations</a> at the top level create properties of the global object. On the other hand, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a> declarations never create properties of the global object.<br>\n\n- In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a> keyword, they're created as members of the global object. (In <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Node.js\">Node.js</a> this is not the case.) <br>\n\n- The properties of the global object are automatically added to the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Global_scope\">global scope</a>. <br>\n</details> <br>\n\n<!-- ========================= 2.2 - Property of Global Object - Example Code =========================== -->\n\n<pre class=\"js\"><code>// Properties of Global Object \"window\"\nvar globalVariable_var = 1000;\nfunction globalFunctionDeclarationFunction(){\n  // doSthg\n}\n\nconsole.log(window.globalVariable_var === globalVariable_var);\nconsole.log(window.globalFunctionDeclarationFunction === globalFunctionDeclarationFunction);\n</code></pre>\n\n<!-- ========================= 3 - Why not using var =========================== -->\n\n<b class=\"red fs24\">3 - Why not use var :</b> <br>\n\n- Có một vài lí do mà chúng ta không nên sử dụng var để khai báo biến <br>\n1. Var tạo ra properties cho Global Object - Object Window <br>\n<pre class=\"js\"><code>// Example\nvar isLogin = false; // this variable inside Global Execution Context;\n\nfunction processWithdraw(){\n  if(!isLogin) return;\n  // process....\n};\n\nif someone change window.isLogin = true => then they can processWithdraw\n</code></pre>\n\n2. Từ khóa var tạo ra biến không không có block\n\n<pre class=\"js\"><code>// Không tạo ra block scope\nvar i = 0 ;\nfor (i ; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n\n// var i = 0;\nsetTimeout(() => console.log(i), 1); ---> Move to WebAPIS handle\nsetTimeout(() => console.log(i), 1); ---> Move to WebAPIS handle\nsetTimeout(() => console.log(i), 1); ---> Move to WebAPIS handle\n\n() => console.log(i); WebAPI ---> Move to callback queue then move to ----> Execute \n() => console.log(i); WebAPI ---> Move to callback queue then move to ----> Execute\n() => console.log(i); WebAPI ---> Move to callback queue then move to ----> Execute\n\nconsole.log(i); ----> execute this statement but now i = 3\nconsole.log(i); ----> execute this statement but now i = 3\nconsole.log(i); ----> execute this statement but now i = 3\n\n\n// Example 2 : \n\nfor (var i = 0; i < 3; i++) {\n  var j = i * 2;\n}\nconsole.log(i); // 3\nconsole.log(j); // 4\n\nfor (let k = 0; k < 3; k++) {\n  let l = k * 2;\n}\nconsole.log(k); // undefined\nconsole.log(l); // undefined\n\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","index":6,"show":["detail"]}],[{"data":8,"index":"0","name":"stt","show":["default-home"]},{"data":"z","index":"1","name":"method","show":["home","detail"]},{"data":"\tundefined : mean do not exist this referance / variable -> try to access will throw RefferanceError Variable was defined in global execution context by let and const. If you are try to access will throw Refferance error. -> Uncaught ReferenceError: Cannot access 'a_b' before initialization null : mean you defined but this valua is empty -> Mean you defined the variable but now you dont defined it's value","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"z","index":"3","name":"involved","show":["home","detail"]},{"data":"z","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":9,"index":"0","name":"stt","show":["default-home"]},{"data":"global object","index":"1","name":"method","show":["home","detail"]},{"data":"global object === object window","index":"2","name":"syntax","show":["home","detail"]},{"data":"global object === object window","index":"3","name":"involved","show":["home","detail"]},{"data":"global object === object window","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"1. Shortest Program in JS: Empty file. Still, browsers make global EC and global space along with Window object. <br>\n2. Global Space: Anything that is not in a function, is in the global space. <br>\n3. Variables present in a global space can be accessed by a \"window\" object. (like window.a) <br>\n4. In global space, (this === window) object. <br>\n \nShortest javascript program : No code \n\n- window object is a big object with a lot of properties , method . it was created by javascript engine along with the global execution context . <br>\n- all properties and function were given by javascript engine, remember it <br>\n- at global level, this point to the WINDOW OBJECT  \n\n\n- javascript just doesn't run by browser, it also run by server and another place with javascript engine like v8, spider-monkey engine. incase of browser it create window. in case of node it create global.<br?\n\n- whenever you create an execution context or event you create function excution context and at the global level => this keyword will point to WINDOW OBJECT  <br>\n\n- undefined is just a special placeholder for variable. a special value for variable at creation phase in global execution context / execution context.  <br>\n\n<hr>\n\n- Đừng bao giờ re-assign variable to undefined bởi vì undefined mang ý nghĩa là chưa được định nghĩa. <br>\n- Ngữ cảnh của undefined: <br>\n- - 1 Khi bạn cố truy cập vào một biến mà chưa được khai báo. Sẽ xuất hiện lỗi Undefined. <br>\n- - 2 Javascript sử dụng undefined để gán cho các variable trong creation phase in execution context. <br>\n\n\n<pre class=\"js\"><code>// Example why not re-assign with undefined \nvar a = 1000;\na = false;\na = \"this is example , and can be accepted !\";\na = undefined;\n// do not do this because undefined mean this variable is not assign value yet or do not declare.\na = null;\n// do this instead \n</code></pre>","index":6,"show":["detail"]}],[{"data":10,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"fs22 blue\">Block and BlockScope</b>","index":"1","name":"method","show":["home","detail"]},{"data":"<b class=\"fs22 blue\">Block and BlockScope</b>","index":"2","name":"syntax","show":["home","detail"]},{"data":"<b class=\"fs22 blue\">Block and BlockScope</b>","index":"3","name":"involved","show":["home","detail"]},{"data":"<b class=\"fs22 blue\">Block and BlockScope</b>","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"<b class=\"fs22 blue\">1- Block</b> <br>\n- Block trong JavaScript được sử dụng để nhóm 0 hoặc nhiều câu lệnh bằng dấu ngoặc nhọn ({}). <Br>\n- Block thường được dùng chung với các câu lệnh sau : while, if...else and for statements  <Br>\n\n<pre class=\"js\"><code>// Example Block \nfor(let i=0; i<10; i++){\n    // your code over here\n}\n\n{\n    const a = 10;\n    const b = 30;\n    let c = 40;\n}\n\n</code></pre>\n\n<b class=\"fs22 blue\">2- BlockScope</b> <br>","index":6,"show":["detail"]}]]}}