{"documentTitle":"Function - JavaScript | Note","HeadingOne":"<a href=\"\">Javascript Engine</a>","mainContent":"<!-- ================================ 0 . Content ================================ -->\n<h3>Content</h3>\n- <a href=\"#1\">1. Function Defination</a> <br>\n\n\n<!-- ================================ 1 . Function Defination  ================================ -->\n\n\n<b class=\"red fs22\">- 1 Argument :</b> Đối số <br>\n\n\n\n<!-- ================================ 1.1 . Đối số ================================ -->\n\n<!-- ================================ 1.2 . Tham số================================ -->\n\n<b class=\"red fs22\">- 2 Parameter :</b> Tham số <br>\n\n<!-- ================================ 2.   ================================ -->\n\n\n<!-- ================================ 3.  ================================ -->\n\n\n\n\n\n\n\n","headingMainTwo":"<a href=\"\">Javascript Engine</a>","referanceContent":"<ol>\n <li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript\">Javascript on Mozilla</a></li>\n <li><a href=\"https://stephengrider.github.io/JSPlaygrounds/\">Playgrounds</a></li>\n <li><a href=\"https://pythontutor.com/\">Global context visuallize</a></li>\n <li><a href=\"https://javascriptkicks.com/stories\">Javascript Kick</a></li>\n <li><a href=\"https://www.youtube.com/watch?v=pN6jk0uUrD8&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&ab_channel=AkshaySaini\">Youtube/Namaste JavaScript - Akshay Saini</a></li>\n <li><a href=\"https://viblo.asia/p/hieu-scope-va-context-trong-javascript-3P0lPArm5ox\">Viblo - Scope & Context</a></li>\n <li><a href=\"http://ryanmorr.com/understanding-scope-and-context-in-javascript/\">Ryanmorr - Blog</a></li>\n <li><a href=\"https://dev.to/narottam04\">Narottam Sahu - Dev.to</a></li>\n <li><a href=\"https://blog.webdrip.in/\">Narottam Sahu - Blog</a></li>\n <li><a href=\"https://www.theconsolelogs.com/logs/advanced-js/#javascript-engine\">The Console - Blog</a></li>\n</ol>\n ","dataTable":{"dataTableHeader":[{"data":"STT","name":"STT","actionSrc":"./Assets/Icons/plus-icon.svg","index":0},{"data":"Method Name","name":"Method Name","actionSrc":"./Assets/Icons/plus-icon.svg","index":1},{"data":"Syntax","name":"Syntax","actionSrc":"./Assets/Icons/plus-icon.svg","index":2},{"data":"Involved","name":"Involved","actionSrc":"./Assets/Icons/plus-icon.svg","index":3},{"data":"Description","name":"Description","actionSrc":"./Assets/Icons/plus-icon.svg","index":4},{"data":"Action","name":"Action","actionSrc":null,"index":5}],"dataTableFirstRow":[{"name":"stt","data":"0","index":0},{"name":"method","data":"<textarea></textarea>","index":1,"bg":""},{"name":"syntax","data":"<textarea></textarea>","index":2,"bg":""},{"name":"involved","data":"<textarea></textarea>","index":3,"bg":""},{"name":"description","data":"<textarea></textarea>","index":4,"bg":""},{"name":"action","data":null,"index":5}],"dataTableBody":[[{"data":1,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"fs20 blue\">Syntax Parser</b>","index":"1","name":"method","show":["home","detail"],"bg":""},{"data":"Syntax Parser","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"Syntax Parser","index":"3","name":"involved","show":["home","detail"]},{"data":"Syntax Parser","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":2,"index":"0","name":"stt","show":["default-home"],"bg":"hsl(108.49918573364312,50%,50%)"},{"data":"Execution context","index":"1","name":"method","show":["home","detail"],"bg":"hsl(108.49918573364312,50%,50%)"},{"data":"Execution context","index":"2","name":"syntax","show":["home","detail"],"bg":"hsl(108.49918573364312,50%,50%)"},{"data":"Execution context","index":"3","name":"involved","show":["home","detail"],"bg":"hsl(108.49918573364312,50%,50%)"},{"data":"Execution context","index":"4","name":"description","show":["home","detail"],"bg":"hsl(108.49918573364312,50%,50%)"},{"data":null,"index":"5","name":"action","show":["default-home"],"bg":"hsl(108.49918573364312,50%,50%)"},{"name":"note","data":"<!-- ================================ Context Enviroment ================================ -->\n\n\n\n<b class=\"fs24 blue\">1 - Global Excution Context : <a href=\"http://ryanmorr.com/understanding-scope-and-context-in-javascript/\">[Tham Khảo]</a> </b> <br>\n\n- Javascript là ngôn ngữ đơn luồng, nghĩa là nó chỉ có thể xử lý một tác vụ một lần. Khi mà trình thông dịch Javascript lần đầu tiên chạy, nó sẽ đi vào bối cảnh thực thi toàn cầu theo mặc định. <br>\n\n- Mỗi lần gọi hàm từ thời điểm này trở đi sẽ dẫn đến việc tạo ngữ cảnh thực thi mới. <br>\n\n- Bước đầu tiên khi tạo bối cảnh thực thi toàn cầu, trình duyệt thực thi mã Javascript theo 2 giai đoạn. <br> <br>\n\n\n<b class=\"fs20 purple\">Step 1 - Execution Context - Giai đoạn cấp phát bộ nhớ. </b> <br>\n- Giai đoạn này JavaScript sẽ quét qua tất cả mã và cấp phát bộ nhớ cho tất cả các biến và hàm. <br>\n- Đối với biến Javascript sẽ lưu undefined; <br>\n- Đối với function Javascript sẽ lưu .............. ?????? <br> <br>\n\n<b class=\"fs20 purple\">Step 2 - Execution Context - Giai đoạn thực thi code. </b> <br>\n- Giai đoạn thực thi mã, Javascript sẽ thực thi từng dòng mã. <br>\n- Giá trị của a lúc này đang là undefined => Khi gặp var a = 2, nó sẽ gán 2 cho biến a trong bộ nhớ. <br>\n- Giá trị của b lúc này đang là undefined => Khi gặp var a = 4, nó sẽ gán 4 cho biến b trong bộ nhớ. <br>\n- Giá trị của sum lúc này đang là undefined => Khi gặp var sum = a + b, nó sẽ gán 6 cho biến sum trong bộ nhớ. <br> <br>\n\n\n<b class=\"fs22 red\">Visualize By Image</b><a href=\"https://pythontutor.com/\"> - Global context visuallize</a> <br>\n\n<pre class=\"js\"><code>var a = 2;\nvar b = 4;\n\nvar sum = a + b;\n\nconsole.log(sum);\n</code></pre> <br> <br>\n\n\n\n\n<!-- ================================ Execution Context Visualize ================================ -->\n\n<b class=\"fs20 center purple\">Global Context - Visualize Excution Context </b> <br>\n\n<div class=\"center\">\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fPjnibrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq3ufd0eru2ceax067m9.gif\" alt=\"Execution context 1.1\" loading=\"lazy\" style=\"width:50%\"  >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WmYga0PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ty49vslo873hpehxdrw.gif\" alt=\"Execution context 1.2\" loading=\"lazy\" style=\"width:50%\"  >\n</div>\n\n<hr>\n\n<b class=\"fs20 center purple\">Global Context - Visualize Excution Context</b> <br>\n\n<div class=\"center\">\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GKNbYzk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68nk5l6806bax94k0tky.gif\" alt=\"Execution context 1.3\" loading=\"lazy\" style=\"width:50%\"  >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Z5ZMX2Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvfyis150o3i7bn1x6hy.gif\" alt=\"Execution context 1.5\" loading=\"lazy\" style=\"width:50%\"  >\n\n</div>\n\n<div class=\"center\">\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BrZHpOr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e67rsojvcqmowwj3w75b.gif\" alt=\"Execution context 1.5\" loading=\"lazy\" style=\"width:50%\"  >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NfH3YlZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zu35q2as6uy57qve9q.gif\" alt=\"Execution context 1.6\" loading=\"lazy\" style=\"width:50%\"  >\n\n</div>\n\n<!-- ================================ Excution Context In English ================================ -->\n\n<details><summary>ENG</summary>\n- JavaScript is a single threaded language, meaning only one task can be executed at a time. When the JavaScript interpreter initially executes code, it first enters into a global execution context by default. Each invocation of a function from this point on will result in the creation of a new execution context. <br>\n\n- The browser creates a global execution context with two components, namely memory and code components. The Browser will execute the JavaScript code in two-phase: <br> <br>\n\n 1> Memory Creation Phase <br>\n\nIn the memory creation phase, JavaScript will scan through all the code and allocate memory to all the variables and functions in the code. For variables, JavaScript will store undefined in the memory creation phase, and for functions, it will keep the entire function code, which we will be looking at the following example. <br> <br>\n\n\n 2> Code Execution Phase <br>\n\n\nNow, in the 2nd phase, i.e. code execution, it starts going through the whole code line by line.\n\nAs it encounters var a = 2, it assigns 2 to 'a' in memory. Until now, the value of 'a' was undefined.\n\nSimilarly, it does the same thing for the b variable. It assigns 4 to 'b'. Then it calculates and stores the value of the sum in memory which is 6. Now, in the last step, it prints the sum value in the console and then destroys the global execution context as our code is finished.\n\n\n</details>\n\n\n\n\n<!-- ================================ Call Stack  ================================ -->\n\n<b class=\"fs24 blue\">2 - Call Stack : <a href=\"http://ryanmorr.com/understanding-scope-and-context-in-javascript/\">[Tham Khảo]</a> </b> <br>\n\n\n- Khi một hàm được gọi trong JavaScript, JavaScript sẽ tạo ngữ cảnh thực thi. Bối cảnh thực thi sẽ trở nên phức tạp khi chúng ta lồng các hàm bên trong một hàm. <br>\n- JavaScript quản lý việc tạo và xóa bối cảnh thực thi mã với sự trợ giúp của Call Stack. <br> \n\n\n\n<b class=\"fs22 red\">Visualize By Image</b><a href=\"https://pythontutor.com/\"> - Global context visuallize</a> <br>\n\n<pre class=\"js\"><code>function a() {\n    function insideA() {\n        return true;\n    }\n    insideA();\n}\na();\n</code></pre> <br>\n\n<div class=\"center\">\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hLhHObuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03bry7soja8z3ad143ry.gif\" alt=\"Call Stack\" loading=\"lazy\" style=\"width:50%\" >\n\n  <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LjUZjJan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idywyfc19t2vsf1nyww1.png\" alt=\"Call Stack\" loading=\"lazy\" style=\"width:51.8%\" > <br>\n\n</div>\n<!-- ================================ Call Stack In English ================================ -->\n\n\n<details><summary>ENG</summary>\n\nWhen a function is invoked in JavaScript, JavaScript creates an execution context. Execution context will get complicated as we nest functions inside a function.\n\n</details>\n","index":6,"show":["detail"]}],[{"data":3,"index":"0","name":"stt","show":["default-home"]},{"data":"Lexical Enviroment / Lexical Scope","index":"1","name":"method","show":["home","detail"],"bg":""},{"data":"Lexical Enviroment / Lexical Scope","index":"2","name":"syntax","show":["home","detail"]},{"data":"Lexical Enviroment / Lexical Scope","index":"3","name":"involved","show":["home","detail"],"bg":""},{"data":"Lexical Enviroment / Lexical Scope","index":"4","name":"description","show":["home","detail"],"bg":""},{"data":null,"index":"5","name":"action","show":["default-home"]},{"name":"note","data":"Lexical Enviroment có nghĩa là nơi mà đoạn code của bạn được viết <br>\n\n\n-  <br>\n\n<pre class=\"js\"><code>#index.js\nvar a = 10;\n\nfunction hello(){\n  console.log(\"Hello world !\")\n}\n\nconsole.log(\"Finished\") \n\n- Lexical Enviroment của biến a là nằm trong file index.js\n- Lexical Enviroment của function hello là nằm trong file index.js\n- Lexical Enviroment của câu lệnh console.log(\"Finished\") là nằm trong file index.js\n- Lexical Enviroment của câu lệnh console.log(\"hello world !\") là nằm trong function hello / function scope\n</code></pre>\n \n","index":6,"show":["detail"]}],[{"data":4,"index":"0","name":"stt","show":["default-home"]},{"data":"For...lóps block ","index":"1","name":"method","show":["home","detail"]},{"data":"For...lóps block ","index":"2","name":"syntax","show":["home","detail"]},{"data":"For...lóps block ","index":"3","name":"involved","show":["home","detail"]},{"data":"For...lóps block ","index":"4","name":"description","show":["home","detail"]},{"data":null,"index":"5","name":"action","show":["default-home"]}],[{"data":5,"index":"0","name":"stt","show":["default-home"]},{"data":"<b class=\"fs20 blue\">Variable Scope</b>","index":"1","name":"method","show":["home","detail"],"bg":""},{"data":"<b class=\"fs20 blue\">Var</b>\n\n<pre class=\"js\"><code>//Var Scope\n\nif(false){\n  var number1 = 1000;\n}\nconsole.log(number1) // undefined\nconsole.log(number2) // referance error number2 isn't defined\n\n\n</code></pre>","index":"2","name":"syntax","show":["home","detail"],"bg":""},{"data":"<b class=\"fs20 blue\">Let</b>\n\n<pre class=\"js\"><code>//Let Scope\n\nif(false){\n  let number1 = 1000;\n}\nconsole.log(number1) \n// referance error number1 isn't defined\nconsole.log(number2) \n// referance error number2 isn't defined\n</code></pre>","index":"3","name":"involved","show":["home","detail"],"bg":""},{"data":"<b class=\"fs20 blue\">Const</b>\n\n<pre class=\"js\"><code>//Let Scope\n\nif(false){\n  const number1 = 1000;\n}\nconsole.log(number1) \n// referance error number1 isn't defined\nconsole.log(number2) \n// referance error number2 isn't defined\n</code></pre>","index":"4","name":"description","show":["home","detail"],"bg":""},{"data":null,"index":"5","name":"action","show":["default-home"]}]]}}